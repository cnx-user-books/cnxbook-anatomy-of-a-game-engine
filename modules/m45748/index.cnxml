<document xmlns="http://cnx.rice.edu/cnxml"> 
<title>Slick0160: Using the draw and drawFlash methods.</title>
<metadata xmlns:md="http://cnx.rice.edu/mdml">
  <md:content-id>m45748</md:content-id>
  <md:title>Slick0160: Using the draw and drawFlash methods.</md:title>
  <md:abstract>Learn about using the draw, drawCentered, and drawFlash methods of the Image class.</md:abstract>
  <md:uuid>c8d91157-8952-40b7-8cca-d15ae4f65214</md:uuid>
</metadata>

<content>
















<section id="h11000">
<title>
Table of Contents

</title>




<list id="ul1000" list-type="bulleted">

	

<item id="li1000">
<link id="a1000" target-id="Preface">

Preface

</link>


	

<list id="ul1001" list-type="bulleted">

		

<item id="li1001">
<link id="a1001" target-id="Viewing_tip">

Viewing tip

</link>


<list id="ul1002" list-type="bulleted">

			

<item id="li1002">
<link id="a1002" target-id="Figures">

Figures

</link>


</item>



			

<item id="li1003">
<link id="a1003" target-id="Listings">

Listings

</link>


</item>


		

</list>


		

</item>


	

</list>


	

</item>


	

<item id="li1004">
<link id="a1004" target-id="Preview">

Preview

</link>

 

</item>


	

<item id="li1005">
<link id="a1005" target-id="General_background_information">

General background information

</link>


</item>


	

<item id="li1006">
<link id="a1006" target-id="Discussion_and_sample_code">

Discussion and sample code

</link>


<list id="ul1003" list-type="bulleted">

		

<item id="li1007">
<link id="a1007" target-id="The_program_named_Slick0160a">

The program named Slick0160a

</link>

 
		

<list id="ul1004" list-type="bulleted">

			

<item id="li1008">
<link id="a1008" target-id="Beginning_of_the_Slick0160a_class">

Beginning of the Slick0160a class

</link>


</item>


			

<item id="li1009">
<link id="a1009" target-id="The_main_method_1">

The main method

</link>


</item>


			

<item id="li1010">
<link id="a1010" target-id="The_overridden_init_method">

The init method

</link>


</item>


			

<item id="li1011">
<link id="a1011" target-id="The_overridden_update_method_1">

The update 
			method

</link>


</item>


			

<item id="li1012">
<link id="a1012" target-id="The_render_method_1">

The render method

</link>


</item>


		

</list>


		

</item>


		

<item id="li1013">
<link id="a1013" target-id="The_program_named_Slick0160b">

The program named Slick0160b

</link>


<list id="ul1005" list-type="bulleted">

			

<item id="li1014">
<link id="a1014" target-id="Beginning_of_the_class_named_Slick0160b">

Beginning of the class named Slick0160b

</link>


</item>


			

<item id="li1015">
<link id="a1015" target-id="The_update_method_2">

The update method

</link>


</item>


			

<item id="li1016">
<link id="a1016" target-id="The_render_method_2">

The render method

</link>


</item>


		

</list>


		

</item>


	

</list>


	

</item>


	

<item id="li1017">
<link id="a1017" target-id="Run_the_program">

Run the programs

</link>


</item>


	

<item id="li1018">
<link id="a1018" target-id="Summary">

Summary

</link>

 

</item>


	

<item id="li1019">
<link id="a1019" target-id="Whats_next">

What's next?

</link>


</item>


	

<item id="li1020">
<link id="a1020" target-id="Miscellaneous">

Miscellaneous

</link>


</item>


	

<item id="li1021">
<link id="a1021" target-id="Complete_program_listing">

Complete program listing

</link>


</item>




</list>


	

	

</section>
<section id="h11001">
<title>
<emphasis id="Preface" effect="bold">

Preface

</emphasis>


</title>


	

	

<para id="p1000">
This module is one in a collection of modules designed to teach you about 
	the anatomy of a game engine.

</para>




<para id="p1001">
Although the modules in this collection will concentrate on the Java game 
library named Slick2D, the 
concepts involved and the knowledge that you will gain is applicable to 
different game engines written in different programming languages as well.

</para>




<para id="p1002">
An earlier module titled 


<link id="a1022" url="http://cnx.org/contents/ec409a1f-e946-486a-a681-980d0effa996/Slick0140-A-first-look-at-Slic">

A first look at Slick2D bitmap graphics

</link>

 
introduced you to the use of bitmap graphics in Slick2D. The purpose of this module is 
dig a little deeper into the use of bitmap graphics

</para>


	

<section id="h21000">
<title>
<emphasis id="Viewing_tip" effect="bold">

Viewing tip

</emphasis>


</title>


	

<para id="p1003">
I recommend that you open another copy of this module in a separate 
browser window and use the following links to easily find and view the images 
and listings while you are reading about them.

</para>


	

<section id="h31000">
<title>
<emphasis id="Figures" effect="bold">

Figures

</emphasis>


</title>


	

<list id="ul1006" list-type="bulleted">

		

<item id="li1022">
<link id="a1023" target-id="Figure_1">

Figure 1

</link>

. Output from the program named Slick0160a. 

</item>


		

<item id="li1023">
<link id="a1024" target-id="Figure_2">

Figure 2

</link>

. One output from the program named Slick0160b. 

</item>


		

<item id="li1024">
<link id="a1025" target-id="Figure_3">

Figure 3

</link>

. Another output from the program named Slick0160b.

</item>




	

</list>


	

</section>
<section id="h31001">
<title>
<emphasis id="Listings" effect="bold">

Listings

</emphasis>


</title>


	

<list id="ul1007" list-type="bulleted">

		

<item id="li1025">
<link id="a1026" target-id="Listing_1">

Listing 1

</link>

. Beginning of the Slick0160a class. 

</item>


		

<item id="li1026">
<link id="a1027" target-id="Listing_2">

Listing 2

</link>

. The main method. 

</item>


		

<item id="li1027">
<link id="a1028" target-id="Listing_3">

Listing 3

</link>

. The init method. 

</item>


		

<item id="li1028">
<link id="a1029" target-id="Listing_4">

Listing 4

</link>

. The render method. 

</item>


		

<item id="li1029">
<link id="a1030" target-id="Listing_5">

Listing 5

</link>

. Draw the top four images.

</item>


		

<item id="li1030">
<link id="a1031" target-id="Listing_6">

Listing 6

</link>

. Draw three more images.

</item>


		

<item id="li1031">
<link id="a1032" target-id="Listing_7">

Listing 7

</link>

. Draw image based on its center.

</item>


		

<item id="li1032">
<link id="a1033" target-id="Listing_8">

Listing 8

</link>

. Draw a flipped copy.

</item>


		

<item id="li1033">
<link id="a1034" target-id="Listing_9">

Listing 9

</link>

. Beginning of the Slick0160b class.

</item>


		

<item id="li1034">
<link id="a1035" target-id="Listing_10">

Listing 10

</link>

. The update method.

</item>


		

<item id="li1035">
<link id="a1036" target-id="Listing_11">

Listing 11

</link>

. Beginning of the render method.

</item>


		

<item id="li1036">
<link id="a1037" target-id="Listing_12">

Listing 12

</link>

. The large flashing spider.

</item>


		

<item id="li1037">
<link id="a1038" target-id="Listing_13">

Listing 13

</link>

. Source code for Slick0160a.java.

</item>


		

<item id="li1038">
<link id="a1039" target-id="Listing_14">

Listing 14

</link>

. Source code for Slick0160b.java.

</item>


	

</list>


	

</section>
</section>
</section>
<section id="h11002">
<title>
<emphasis id="Preview" effect="bold">

Preview

</emphasis>


</title>


	

<para id="p1004">
Bitmap graphics are used in a variety of ways in game and simulation 
	programming. Therefore, I will present and explain two programs that dig 
	more deeply into the use of bitmap graphics in Slick2D.

</para>




<para id="p1005">
<emphasis id="strong1000" effect="bold">
The program named Slick0160a

</emphasis>
</para>




<para id="p1006">
The first program named 

<emphasis id="strong1001" effect="bold">
Slick0160a

</emphasis>
 calls the 

<emphasis id="strong1002" effect="bold">
draw

</emphasis>
 method of the 

<emphasis id="strong1003" effect="bold">
Image

</emphasis>
 
class several times in succession to
illustrate some of the options available with the draw
method. This program also illustrates flipping an image. The output from this 
program is shown in 

<link id="a1040" target-id="Figure_1">

Figure 1

</link>

.

</para>







<table id="table1000" summary="This is a table." pgwide="1">
<tgroup cols="1">


<thead id="thead1000">
<row id="tr1000">
<entry id="th1000">



<emphasis id="Figure_1" effect="bold">

Figure 1

</emphasis>

. Output from the program named Slick0160a.


</entry>
</row>
</thead>


<tbody id="tbody1000">
<row id="tr1001">
<entry id="td1000">



<media id="media1000" alt="Missing image." display="block">
<image id="img1000" mime-type="image/jpeg" src="../../media/slick0160a1.jpg" width="519" height="578"/>
</media>




</entry>
</row>
</tbody>


</tgroup>
</table>






<para id="p1007">
<emphasis id="strong1004" effect="bold">
The program named Slick0160b

</emphasis>
</para>




<para id="p1008">
The second program named 

<emphasis id="strong1005" effect="bold">
Slick0160b

</emphasis>
 illustrates the use of the 

<emphasis id="strong1006" effect="bold">
drawFlash

</emphasis>
 method to draw an image in
silhouette and to cause the silhouette to switch
back and forth between two or more colors. The program draws several spiders in 
silhouette. It causes a large spider to 
flash back and forth between a white silhouette and a blue silhouette. A screen shot of the output from the 
program while the large spider is in its white state is shown in


<link id="a1041" target-id="Figure_2">

Figure 2

</link>

.

</para>






<table id="table1001" summary="This is a table." pgwide="1">
<tgroup cols="1">


<thead id="thead1001">
<row id="tr1002">
<entry id="th1001">



<emphasis id="Figure_2" effect="bold">

Figure 2

</emphasis>

. One output from the program named Slick0160b.


</entry>
</row>
</thead>


<tbody id="tbody1001">
<row id="tr1003">
<entry id="td1001">



<media id="media1001" alt="Missing image." display="block">
<image id="img1001" mime-type="image/jpeg" src="../../media/slick0160a2.jpg" width="391" height="281"/>
</media>




</entry>
</row>
</tbody>


</tgroup>
</table>






<para id="p1009">
A screen shot of the output from the program while the large spider is in 
its blue state is shown in 

<link id="a1042" target-id="Figure_3">

Figure 3

</link>

.

</para>






<table id="table1002" summary="This is a table." pgwide="1">
<tgroup cols="1">


<thead id="thead1002">
<row id="tr1004">
<entry id="th1002">



<emphasis id="Figure_3" effect="bold">

Figure 3

</emphasis>

. Another output from the program named Slick0160b.


</entry>
</row>
</thead>


<tbody id="tbody1002">
<row id="tr1005">
<entry id="td1002">



<media id="media1002" alt="Missing image." display="block">
<image id="img1002" mime-type="image/jpeg" src="../../media/slick0160a3.jpg" width="391" height="281"/>
</media>




</entry>
</row>
</tbody>


</tgroup>
</table>






<para id="p1010">
<emphasis id="strong1007" effect="bold">
What you have learned

</emphasis>
</para>




<para id="p1011">
In the previous module, you learned how to make sprites move at a constant 
speed in front of an image in the face of widely varying frame rates. You also 
learned about a rudimentary form of collision detection.

</para>




<para id="p1012">
<emphasis id="strong1008" effect="bold">
What you will learn

</emphasis>
</para>




<para id="p1013">
In this module, you will learn about using the 

<emphasis id="strong1009" effect="bold">
draw

</emphasis>
, 


<emphasis id="strong1010" effect="bold">
drawCentered

</emphasis>
, 
and 

<emphasis id="strong1011" effect="bold">
drawFlash

</emphasis>
 methods of the


<link id="a1043" url="http://slick.ninjacave.com/javadoc/org/newdawn/slick/Image.html">


Image

</link>

 class.

</para>


	

</section>
<section id="h11003">
<title>
<emphasis id="General_background_information" effect="bold">

General 
	background information

</emphasis>


</title>




<para id="p1014">
The Slick2D 


<link id="a1044" url="http://slick.ninjacave.com/javadoc/org/newdawn/slick/Image.html">

Image

</link>

 
class defines about ten overloaded versions of the 

<emphasis id="strong1012" effect="bold">
draw

</emphasis>
 method. 
We will investigate several of them in this module.

</para>




<para id="p1015">
The class also defines three overloaded versions of the 

<emphasis id="strong1013" effect="bold">
drawFlash

</emphasis>
 
method along with a method named 

<emphasis id="strong1014" effect="bold">
drawCentered

</emphasis>
. We will also investigate some of them.

</para>


	

	

</section>
<section id="h11004">
<title>
<emphasis id="Discussion_and_sample_code" effect="bold">

Discussion and sample code

</emphasis>


</title>


	

	

<section id="h21001">
<title>
<emphasis id="The_program_named_Slick0160a" effect="bold">

The program named Slick0160a

</emphasis>




</title>




<section id="h31002">
<title>
<emphasis id="Beginning_of_the_Slick0160a_class" effect="bold">

Beginning of the Slick0160a 
class

</emphasis>


</title>




<para id="p1016">
<emphasis id="strong1015" effect="bold">
Will discuss in fragments

</emphasis>
</para>




<para id="p1017">
A complete listing of this program is provided in 

<link id="a1045" target-id="Listing_13">


Listing 13

</link>

. As is my custom, I will break this program down and discuss it 
in fragments.

</para>




<para id="p1018">
<link id="a1046" target-id="Listing_1">

Listing 1

</link>

 shows the beginning of the class down through 
the constructor.

</para>




	

<table id="table1003" summary="This is a table." pgwide="677">
<tgroup cols="1">


		

<thead id="thead1003">

			

<row id="tr1006">

				

<entry id="th1003">
<emphasis id="Listing_1" effect="bold">

Listing 1

</emphasis>

. Beginning of the 
				Slick0160a class.


</entry>

			

</row>

		

</thead>


		

<tbody id="tbody1003">

			

<row id="tr1007">

				

<entry id="td1003">



<code id="pre1000" display="block">
import org.newdawn.slick.AppGameContainer;
import org.newdawn.slick.BasicGame;
import org.newdawn.slick.GameContainer;
import org.newdawn.slick.Graphics;
import org.newdawn.slick.Image;
import org.newdawn.slick.SlickException;
import org.newdawn.slick.Color;

public class Slick0160a extends BasicGame{
  
  Image rabbit = null;
  
  float rabbitWidth;
  float rabbitHeight;

  //Frame rate we would like to see and maximum frame
  // rate we will allow.
  int targetFPS = 60;
  //----------------------------------------------------//

  public Slick0160a(){//constructor
    //Set the title
    super("Slick0160a, baldwin");
  }//end constructor
  //----------------------------------------------------//
</code>



				

</entry>

			

</row>

		

</tbody>


	

</tgroup>
</table>




	

<para id="p1019">
As usual, it is necessary to declare several import directives that point 
	to classes in the Slick2D library. Also, as in several previous modules, the 
	new class extends the Slick2D class named 

<emphasis id="strong1016" effect="bold">
BasicGame

</emphasis>
.

</para>




<para id="p1020">
<link id="a1047" target-id="Listing_1">

Listing 1

</link>

 declares several instance variables, 
initializing some of them.

</para>




<para id="p1021">
The constructor simply sets the title on the game window.

</para>




</section>
<section id="h31003">
<title>
<emphasis id="The_main_method_1" effect="bold">

The main method

</emphasis>


</title>




<para id="p1022">
The 

<emphasis id="strong1017" effect="bold">
main

</emphasis>
 method is shown in 

<link id="a1048" target-id="Listing_2">

Listing 2

</link>

. 
There is nothing in 

<link id="a1049" target-id="Listing_2">

Listing 2

</link>

 that you haven't seen in 
several previous modules.

</para>




	

<table id="table1004" summary="This is a table." pgwide="677">
<tgroup cols="1">


		

<thead id="thead1004">

			

<row id="tr1008">

				

<entry id="th1004">
<emphasis id="Listing_2" effect="bold">

Listing 2

</emphasis>

.  The main method.


</entry>

			

</row>

		

</thead>


		

<tbody id="tbody1004">

			

<row id="tr1009">

				

<entry id="td1004">



<code id="pre1001" display="block">
  public static void main(String[] args)
                                    throws SlickException{
    AppGameContainer app = new AppGameContainer(
                          new Slick0160a(),512,537,false);
    app.start();
  }//end main
</code>



				

</entry>

			

</row>

		

</tbody>


	

</tgroup>
</table>




	

</section>
<section id="h31004">
<title>
<emphasis id="The_overridden_init_method" effect="bold">

The init method

</emphasis>


</title>




<para id="p1023">
The 

<emphasis id="strong1018" effect="bold">
init

</emphasis>
 method is shown in 

<link id="a1050" target-id="Listing_3">


Listing 3

</link>

.

</para>




<para id="p1024">
There is nothing in 

<link id="a1051" target-id="Listing_3">

Listing 3

</link>

 that you haven't seen 
in previous modules.

</para>




	

<table id="table1005" summary="This is a table." pgwide="677">
<tgroup cols="1">


		

<thead id="thead1005">

			

<row id="tr1010">

				

<entry id="th1005">
<emphasis id="Listing_3" effect="bold">

Listing 3

</emphasis>

.  The init 
				method.


</entry>

			

</row>

		

</thead>


		

<tbody id="tbody1005">

			

<row id="tr1011">

				

<entry id="td1005">



<code id="pre1002" display="block">
  @Override
  public void init(GameContainer gc)
                                   throws SlickException {

    rabbit = new Image("rabbit.png");

    rabbitWidth = rabbit.getWidth();
    rabbitHeight = rabbit.getHeight();
  
    System.out.println(
                   "rabbitWidth: " + rabbitWidth);
    System.out.println(
                 "rabbitHeight: " + rabbitHeight);

    gc.setShowFPS(false) ;
    gc.setTargetFrameRate(targetFPS);//set frame rate
  }//end init
</code>



				

</entry>

			

</row>

		

</tbody>


	

</tgroup>
</table>




	

</section>
<section id="h31005">
<title>
<emphasis id="The_overridden_update_method_1" effect="bold">

The update method

</emphasis>


</title>




<para id="p1025">
The body of the 

<emphasis id="strong1019" effect="bold">
update

</emphasis>
 method is empty so it 
isn't shown here. You can view it in 

<link id="a1052" target-id="Listing_13">

Listing 13

</link>

.

</para>




</section>
<section id="h31006">
<title>
<emphasis id="The_render_method_1" effect="bold">

The render method

</emphasis>


</title>




<para id="p1026">
The interesting code in this program is in the 

<emphasis id="strong1020" effect="bold">
render

</emphasis>
 
method, which begins in 

<link id="a1053" target-id="Listing_4">

Listing 4

</link>

. There is nothing in


<link id="a1054" target-id="Listing_4">

Listing 4

</link>

 that you haven't seen before.

</para>




	

<table id="table1006" summary="This is a table." pgwide="677">
<tgroup cols="1">


		

<thead id="thead1006">

			

<row id="tr1012">

				

<entry id="th1006">
<emphasis id="Listing_4" effect="bold">

Listing 4

</emphasis>

.  The render method.


</entry>

			

</row>

		

</thead>


		

<tbody id="tbody1006">

			

<row id="tr1013">

				

<entry id="td1006">



<code id="pre1003" display="block">
  public void render(GameContainer gc, Graphics g)
                                    throws SlickException{
    //set the drawing mode to honor transparent pixels
    g.setDrawMode(g.MODE_NORMAL);
    g.setBackground(Color.white);
    
</code>



				

</entry>

			

</row>

		

</tbody>


	

</tgroup>
</table>




	

<para id="p1027">
<emphasis id="strong1021" effect="bold">
Draw top four images

</emphasis>
</para>




<para id="p1028">
The code in 

<link id="a1055" target-id="Listing_5">

Listing 5

</link>

 calls four different 
overloaded versions of the 

<emphasis id="strong1022" effect="bold">
draw

</emphasis>
 method on the rabbit image to 
draw the top four images in 

<link id="a1056" target-id="Figure_1">

Figure 1

</link>

.

</para>




	

<table id="table1007" summary="This is a table." pgwide="677">
<tgroup cols="1">


		

<thead id="thead1007">

			

<row id="tr1014">

				

<entry id="th1007">
<emphasis id="Listing_5" effect="bold">

Listing 5

</emphasis>

.  Draw the top four images.

</entry>

			

</row>

		

</thead>


		

<tbody id="tbody1007">

			

<row id="tr1015">

				

<entry id="td1007">



<code id="pre1004" display="block">
    rabbit.draw(0f,0f);
    rabbit.draw(133f,0f,new Color(1.0f,0.0f,1.0f));
    rabbit.draw(266f,0f,0.5f);
    rabbit.draw(335f,0f,128f,192);
</code>



				

</entry>

			

</row>

		

</tbody>


	

</tgroup>
</table>




	

<para id="p1029">
<emphasis id="strong1023" effect="bold">
Draw unchanged at the origin

</emphasis>
</para>




<para id="p1030">
The first call to the 

<emphasis id="strong1024" effect="bold">
draw

</emphasis>
 method in 

<link id="a1057" target-id="Listing_5">


Listing 5

</link>

 simply draws the image unchanged with its upper-left corner at the 
upper-left corner 

<emphasis id="em1000" effect="italics">
(the origin)

</emphasis>
 of the game window.

</para>




<para id="p1031">
<emphasis id="strong1025" effect="bold">
Apply a color filter before drawing

</emphasis>
</para>




<para id="p1032">
The second call to the 

<emphasis id="strong1026" effect="bold">
draw

</emphasis>
 method in 

<link id="a1058" target-id="Listing_5">


Listing 5

</link>

 applies a color filter to the rabbit image and draws it with its 
upper-left corner at 133,0. 

</para>




<para id="p1033">
I haven't found an explanation as to exactly how the color filter is applied. 
It appears from experimentation that the pixel color values in the original 
image are multiplied by the red, green, and blue color values 

<emphasis id="em1001" effect="italics">
(expressed in 
the range from 0 to 1.0)

</emphasis>
 in the color object that is passed as a parameter 
to the method. However, the 

<emphasis id="strong1027" effect="bold">
Image

</emphasis>
 class defines two constants 
named 

<emphasis id="strong1028" effect="bold">
FILTER_LINEAR

</emphasis>
 and 

<emphasis id="strong1029" effect="bold">
FILTER_NEAREST

</emphasis>
 that 
may have something to do with how color filtering is applied.

</para>




<para id="p1034">
<emphasis id="strong1030" effect="bold">
Apply a uniform scale factor before drawing

</emphasis>
</para>


	
	

<para id="p1035">
The third call to the 

<emphasis id="strong1031" effect="bold">
draw

</emphasis>
 method in
	

<link id="a1059" target-id="Listing_5">

Listing 5

</link>

 applies a scale factor of 0.5 to both 
	dimensions of the rabbit image and draws it with its upper-left corner at 
	266,0.

</para>




<para id="p1036">
<emphasis id="strong1032" effect="bold">
Change the dimensions before drawing

</emphasis>
</para>




<para id="p1037">
The fourth call to the 

<emphasis id="strong1033" effect="bold">
draw

</emphasis>
 method in 

<link id="a1060" target-id="Listing_5">


Listing 5

</link>

 resizes the rabbit image to a width of 128 pixels and a height of 
192 pixels and draws the modified image with its upper-left corner at 335,0.

</para>


	

<para id="p1038">
<emphasis id="strong1034" effect="bold">
Draw three more images

</emphasis>
</para>




<para id="p1039">
The code in 

<link id="a1061" target-id="Listing_6">

Listing 6

</link>

 calls three different 
overloaded versions of the 

<emphasis id="strong1035" effect="bold">
draw

</emphasis>
 method on the rabbit image to 
draw the two images on the center left and the large image on the bottom left of


<link id="a1062" target-id="Figure_1">

Figure 1

</link>

.

</para>




	

<table id="table1008" summary="This is a table." pgwide="677">
<tgroup cols="1">


		

<thead id="thead1008">

			

<row id="tr1016">

				

<entry id="th1008">
<emphasis id="Listing_6" effect="bold">

Listing 6

</emphasis>

.  Draw three more images.

</entry>

			

</row>

		

</thead>


		

<tbody id="tbody1008">

			

<row id="tr1017">

				

<entry id="td1008">



<code id="pre1005" display="block">
    rabbit.draw(0f,133f);
    rabbit.draw(133f,133f,32f,32f,96f,96f);
    rabbit.draw(0f,266f,256f,532f,32f,32f,96f,96f,new Color(1.0f,1.0f,0.0f));</code>



				

</entry>

			

</row>

		

</tbody>


	

</tgroup>
</table>




	

<para id="p1040">
<emphasis id="strong1036" effect="bold">
Draw another unchanged version

</emphasis>
</para>


	

<para id="p1041">
The first call to the 

<emphasis id="strong1037" effect="bold">
draw

</emphasis>
 method in
	

<link id="a1063" target-id="Listing_6">

Listing 6

</link>

 simply draws another unchanged version of 
	the rabbit image in a new location, 0,133.

</para>




<para id="p1042">
<emphasis id="strong1038" effect="bold">
Extract and draw a rectangular section

</emphasis>
</para>




<para id="p1043">
The second call to the 

<emphasis id="strong1039" effect="bold">
draw

</emphasis>
 method in 

<link id="a1064" target-id="Listing_6">


Listing 6

</link>

 extracts a rectangular section from the original image and draws 
it the same size as the original image with its upper-left corner at 133,133.

</para>




<para id="p1044">
The third and fourth parameters 

<emphasis id="em1002" effect="italics">
(32,32)

</emphasis>
 specify the coordinates of 
the upper-left corner of the rectangle that is extracted. The fifth and sixth 
parameters

<emphasis id="em1003" effect="italics">
 (96,96) 

</emphasis>
specify the coordinates of the lower-right corner of 
the rectangle that is extracted.

</para>




<para id="p1045">
<emphasis id="strong1040" effect="bold">
Extract and draw another rectangular section with color filtering

</emphasis>
</para>




<para id="p1046">
The third call to the 

<emphasis id="strong1041" effect="bold">
draw

</emphasis>
 method in 

<link id="a1065" target-id="Listing_6">


Listing 6

</link>

 extracts a rectangular section from the original image and draws 
it with a different size and also applies a color filter. I will leave it as an 
exercise for the student to go to the Slick2D


<link id="a1066" url="http://slick.ninjacave.com/javadoc/org/newdawn/slick/Image.html">


documentation

</link>

 for an explanation of the eight parameters of type 

<emphasis id="strong1042" effect="bold">

float

</emphasis>
.

</para>




<para id="p1047">
<emphasis id="strong1043" effect="bold">
Draw image based on its center

</emphasis>
</para>




<para id="p1048">
The previous examples have drawn the image in a location based on its 
upper-left corner. The statement in 

<link id="a1067" target-id="Listing_7">

Listing 7

</link>

 draws the image on 
the center right in 

<link id="a1068" target-id="Figure_1">

Figure 1

</link>

. However, instead of 
positioning the image based on its upper-left corner, the image is drawn with 
its center located at 399,266.

</para>




	

<table id="table1009" summary="This is a table." pgwide="677">
<tgroup cols="1">


		

<thead id="thead1009">

			

<row id="tr1018">

				

<entry id="th1009">
<emphasis id="Listing_7" effect="bold">

Listing 7

</emphasis>

.  Draw image based on its 
				center.

</entry>

			

</row>

		

</thead>


		

<tbody id="tbody1009">

			

<row id="tr1019">

				

<entry id="td1009">



<code id="pre1006" display="block">
    rabbit.drawCentered(399f,266f);
</code>



				

</entry>

			

</row>

		

</tbody>


	

</tgroup>
</table>




	

<para id="p1049">
<emphasis id="strong1044" effect="bold">
Draw a flipped copy

</emphasis>
</para>


	

<para id="p1050">
The code in 

<link id="a1069" target-id="Listing_8">

Listing 8

</link>

 makes a call to the

<emphasis id="strong1045" effect="bold">
 
	getFlippedCopy

</emphasis>
 method of the 

<emphasis id="strong1046" effect="bold">
Image

</emphasis>
 class, followed 
	by a call to the 

<emphasis id="strong1047" effect="bold">
draw

</emphasis>
 method to draw the image in the 
	bottom-right of 

<link id="a1070" target-id="Figure_1">

Figure 1

</link>

. Note that the rabbit is 
	facing the opposite direction in that image. The 

<emphasis id="strong1048" effect="bold">
boolean

</emphasis>
 
	parameters specify whether the image is to be flipped on the horizontal, 
	vertical, or both axes. In this case, a value of true caused the image to be 
	flipped on the horizontal axis only.

</para>




	

<table id="table1010" summary="This is a table." pgwide="677">
<tgroup cols="1">


		

<thead id="thead1010">

			

<row id="tr1020">

				

<entry id="th1010">
<emphasis id="Listing_8" effect="bold">

Listing 8

</emphasis>

.  Draw a flipped copy.

</entry>

			

</row>

		

</thead>


		

<tbody id="tbody1010">

			

<row id="tr1021">

				

<entry id="td1010">



<code id="pre1007" display="block">
    Image tempImage = rabbit.getFlippedCopy(true,false);
    tempImage.draw(266f,399f);

  }//end render

}//end class Slick0160a
</code>



				

</entry>

			

</row>

		

</tbody>


	

</tgroup>
</table>




	

<para id="p1051">
<link id="a1071" target-id="Listing_8">

Listing 8

</link>

 also signals the end of the 

<emphasis id="strong1049" effect="bold">

	render

</emphasis>
 method and the end of the class named 

<emphasis id="strong1050" effect="bold">
Slick0160a

</emphasis>
.

</para>




<para id="p1052">
The Slick2D 

<emphasis id="strong1051" effect="bold">
Image

</emphasis>
 class provides many additional 
capabilities that are not illustrated in this program. I will leave it as an 
exercise for the student to explore them. However, there is one other set of 
three overloaded methods named 

<emphasis id="strong1052" effect="bold">
drawFlash

</emphasis>
 that I will illustrate 
in this module. That is the topic of the next section.

</para>




</section>
</section>
<section id="h21002">
<title>
<emphasis id="The_program_named_Slick0160b" effect="bold">

The program named Slick0160b

</emphasis>


</title>




<section id="h31007">
<title>
<emphasis id="Beginning_of_the_class_named_Slick0160b" effect="bold">

Beginning of the class named Slick0160b

</emphasis>


</title>


	

<para id="p1053">
A complete listing of this program is provided in 

<link id="a1072" target-id="Listing_14">


	Listing 14

</link>

. As before, I will break this program down and discuss it in 
	fragments.

</para>




<para id="p1054">
<link id="a1073" target-id="Listing_9">

Listing 9

</link>

 shows the beginning of the class named 


<emphasis id="strong1053" effect="bold">
Slick0160b

</emphasis>
 
	down through the 

<emphasis id="strong1054" effect="bold">
init

</emphasis>
 method.

</para>




	

<table id="table1011" summary="This is a table." pgwide="677">
<tgroup cols="1">


		

<thead id="thead1011">

			

<row id="tr1022">

				

<entry id="th1011">
<emphasis id="Listing_9" effect="bold">

Listing 9

</emphasis>

.  Listing 9, Beginning of the Slick0160b 
				class.

</entry>

			

</row>

		

</thead>


		

<tbody id="tbody1011">

			

<row id="tr1023">

				

<entry id="td1011">



<code id="pre1008" display="block">
import org.newdawn.slick.AppGameContainer;
import org.newdawn.slick.BasicGame;
import org.newdawn.slick.GameContainer;
import org.newdawn.slick.Graphics;
import org.newdawn.slick.Image;
import org.newdawn.slick.SlickException;
import org.newdawn.slick.Color;

public class Slick0160b extends BasicGame{
  
  Image spider = null;
  
  float spiderWidth;
  float spiderHeight;
  
  Color silohetteColor = Color.white;
  long timeAccumulator = 0;
  long flashInterval = 128;

  //Target frame rate 
  int targetFPS = 60;
  //----------------------------------------------------//

  public Slick0160b(){//constructor
    //Set the title
    super("Slick0160b, baldwin");
  }//end constructor
  //----------------------------------------------------//

  public static void main(String[] args)
                                    throws SlickException{
    AppGameContainer app = new AppGameContainer(
                          new Slick0160b(),384,240,false);
    app.start();
  }//end main
  //----------------------------------------------------//

  @Override
  public void init(GameContainer gc)
                                   throws SlickException {

    spider = new Image("spider.png");

    spiderWidth = spider.getWidth();
    spiderHeight = spider.getHeight();
  
    System.out.println("spiderWidth: " + spiderWidth);
    System.out.println("spiderHeight: " + spiderHeight);

    gc.setShowFPS(false) ;
    gc.setTargetFrameRate(targetFPS);//set frame rate
  }//end init
</code>



				

</entry>

			

</row>

		

</tbody>


	

</tgroup>
</table>




	

<para id="p1055">
There is nothing new or unusual about the code in 

<link id="a1074" target-id="Listing_9">


	Listing 9

</link>

. Therefore, no explanation beyond the embedded comments should 
	be needed. You might want to note the instance variables at the beginning of 
	the class. They will be used in the code that I will describe later.

</para>


	

</section>
<section id="h31008">
<title>
<emphasis id="The_update_method_2" effect="bold">

The update method

</emphasis>


</title>




<para id="p1056">
Unlike the previous program, which simply displayed what appeared to be 
static images, this program causes one of the images to change as the program 
runs. These changes are programmed into the 

<emphasis id="strong1055" effect="bold">
update

</emphasis>
 method, 
which is shown in 

<link id="a1075" target-id="Listing_10">

Listing 10

</link>

.

</para>




	

<table id="table1012" summary="This is a table." pgwide="677">
<tgroup cols="1">


		

<thead id="thead1012">

			

<row id="tr1024">

				

<entry id="th1012">
<emphasis id="Listing_10" effect="bold">

Listing 10

</emphasis>

.  The update method.

</entry>

			

</row>

		

</thead>


		

<tbody id="tbody1012">

			

<row id="tr1025">

				

<entry id="td1012">



<code id="pre1009" display="block">
  public void update(GameContainer gc, int delta)
                                    throws SlickException{
    timeAccumulator += delta;
    if(timeAccumulator &gt;= flashInterval){
      //Reset accumulator and change color of spider
      // silhouette 
      timeAccumulator = 0;
      if(silohetteColor.equals(Color.white)){
        silohetteColor = Color.blue;
      }else{
        silohetteColor = Color.white;
      }//end if
    }//end if
  }//end update
</code>



				

</entry>

			

</row>

		

</tbody>


	

</tgroup>
</table>




	

<para id="p1057">
<emphasis id="strong1056" effect="bold">
Switch color between white and blue

</emphasis>
</para>




<para id="p1058">
Recall that 

<emphasis id="em1004" effect="italics">
(by default)

</emphasis>
 the 

<emphasis id="strong1057" effect="bold">
update

</emphasis>
 method is executed once during each 
iteration of the game loop. 

<emphasis id="em1005" effect="italics">
(Other programming options are available 
regarding if, when, and how many times the 

<emphasis id="strong1058" effect="bold">
update

</emphasis>
 method is 
executed during one iteration of the game loop.)

</emphasis>
</para>




<para id="p1059">
The purpose of the 

<emphasis id="strong1059" effect="bold">
update

</emphasis>
 method is 
to execute the program logic.

</para>




<para id="p1060">
In this case, the program logic is simple; to switch the color of the large 
spider in 

<link id="a1076" target-id="Figure_2">

Figure 2

</link>

 between white and blue on a regular 
schedule.

</para>




<para id="p1061">
As you will see in the 

<emphasis id="strong1060" effect="bold">
render

</emphasis>
 method later, the color of the large spider is determined by the 
value of the instance variable named 

<emphasis id="strong1061" effect="bold">
silohetteColor

</emphasis>
, which is 
initialized to white in 

<link id="a1077" target-id="Listing_9">

Listing 9

</link>

. Recall that the 
target frame rate is set to 60 frames per second in 

<link id="a1078" target-id="Listing_9">

Listing 
9

</link>

. A variable named 

<emphasis id="strong1062" effect="bold">
flashInterval

</emphasis>
 is initialized to 128 in


<link id="a1079" target-id="Listing_9">

Listing 9

</link>

.

</para>




<para id="p1062">
Also recall that the value of the incoming parameter named 

<emphasis id="strong1063" effect="bold">
delta

</emphasis>
 
is the number of 

<emphasis id="strong1064" effect="bold">
milliseconds

</emphasis>
 since the last time that the 
update method was called. This value was used in a significant way in the 
earlier module titled 


<link id="a1080" url="http://cnx.org/contents/c92f070e-494f-4eb1-a0b9-e36abe4359fd">

A first look at sprite motion, collision detection, and 
timing control

</link>

.

</para>




<para id="p1063">
<emphasis id="strong1065" effect="bold">
The program logic

</emphasis>
</para>




<para id="p1064">
Each time the 

<emphasis id="strong1066" effect="bold">
update

</emphasis>
 method is called, the incoming value of


<emphasis id="strong1067" effect="bold">
delta

</emphasis>
 is added to the value in a variable named 

<emphasis id="strong1068" effect="bold">
timeAccumulator

</emphasis>
. 
When the accumulated time meets or exceeds the value of 

<emphasis id="strong1069" effect="bold">
flashInterval

</emphasis>
, 
the color is switched from white to blue, or from blue to white, depending on 
its current value. Also the time accumulator is set to zero and a new white/blue 
cycle begins.

</para>




<para id="p1065">
The color switch should occur approximately every 128 milliseconds, or about 
eight times per second.

</para>



	


</section>
<section id="h31009">
<title>
<emphasis id="The_render_method_2" effect="bold">

The render method

</emphasis>


</title>




<para id="p1066">
Recall that the execution of program logic in the 

<emphasis id="strong1070" effect="bold">
update

</emphasis>
 
method does not cause the player's view of the game to change. It is not until 
the 

<emphasis id="strong1071" effect="bold">
render

</emphasis>
 method is executed that the images on the screen 
change.

</para>




<para id="p1067">
The 

<emphasis id="strong1072" effect="bold">
render

</emphasis>
 method begins in 

<link id="a1081" target-id="Listing_11">

Listing 11

</link>

.

</para>



	


	

<table id="table1013" summary="This is a table." pgwide="677">
<tgroup cols="1">


		

<thead id="thead1013">

			

<row id="tr1026">

				

<entry id="th1013">
<emphasis id="Listing_11" effect="bold">

Listing 11

</emphasis>

.  Beginning of the render 
				method.

</entry>

			

</row>

		

</thead>


		

<tbody id="tbody1013">

			

<row id="tr1027">

				

<entry id="td1013">



<code id="pre1010" display="block">
  public void render(GameContainer gc, Graphics g)
                                    throws SlickException{
    //set the drawing mode to honor transparent pixels
    g.setDrawMode(g.MODE_NORMAL);
    g.setBackground(Color.red);
    
    //Draw the spider.
    spider.draw(0f,0f);
    
    //Draw a white silhouette of the spider.
    spider.drawFlash(133f,0f);
    
    //Draw a blue silhouette of the spider.
    spider.drawFlash(266f,0f,131f,128f,Color.blue);
</code>



				

</entry>

			

</row>

		

</tbody>


	

</tgroup>
</table>




	

<para id="p1068">
After setting the drawing mode to honor transparency and setting the 
	background color to red, the code in 

<link id="a1082" target-id="Listing_11">

Listing 11

</link>

 causes the three images 
	of the spider along the top of 

<link id="a1083" target-id="Figure_2">

Figure 2

</link>

 to be 
	displayed each time the 

<emphasis id="strong1073" effect="bold">
render

</emphasis>
 method is called. 

<emphasis id="em1006" effect="italics">

	(Recall that the names of the drawing mode constants appear to be reversed 
	between opaque and transparent.)

</emphasis>
</para>




<para id="p1069">
The call to the 

<emphasis id="strong1074" effect="bold">
draw

</emphasis>
 method in 

<link id="a1084" target-id="Listing_11">

Listing 
11

</link>

 displays the spider image in the upper-left corner of 

<link id="a1085" target-id="Figure_2">


Figure 2

</link>

.

</para>




<para id="p1070">
The first call to the 

<emphasis id="strong1075" effect="bold">
drawFlash

</emphasis>
 method calls one of three 
overloaded versions of the 

<emphasis id="strong1076" effect="bold">
drawFlash

</emphasis>
 method. This version of 
the method draws a white silhouette of the spider at a location specified by the 
parameters, 133,0.

</para>




<para id="p1071">
The second call to the 

<emphasis id="strong1077" effect="bold">
drawFlash

</emphasis>
 method draws a silhouette 
of the spider at a location of 266,0, with a width of 131 pixels, a height of 
128 pixels and a blue color.

</para>




<para id="p1072">
Note that none of the code in 

<link id="a1086" target-id="Listing_11">

Listing 
11

</link>

 depends on the logic that is executed in the 

<emphasis id="strong1078" effect="bold">
update

</emphasis>
 
method. Therefore, the three images appear to be static despite the fact that 
they are being redrawn about 60 times per second.

</para>




<para id="p1073">
<emphasis id="strong1079" effect="bold">
The large flashing spider

</emphasis>
</para>




<para id="p1074">
The call to the 

<emphasis id="strong1080" effect="bold">
drawFlash

</emphasis>
 method in 

<link id="a1087" target-id="Listing_12">


Listing 12

</link>

 produces the large flashing spider at the bottom of


<link id="a1088" target-id="Figure_2">

Figure 2

</link>

 and


<link id="a1089" target-id="Figure_3">

Figure 3

</link>

.

</para>





	

<table id="table1014" summary="This is a table." pgwide="677">
<tgroup cols="1">


		

<thead id="thead1014">

			

<row id="tr1028">

				

<entry id="th1014">
<emphasis id="Listing_12" effect="bold">

Listing 12

</emphasis>

.  The large flashing spider.

</entry>

			

</row>

		

</thead>


		

<tbody id="tbody1014">

			

<row id="tr1029">

				

<entry id="td1014">



<code id="pre1011" display="block">
    //Cause an enlarged version of the spider to flash
    // between white and blue silhouette at a rate
    // of 1/flashInterval.
    spider.drawFlash(0f,0f,262f,256f,silohetteColor);

  }//end render

}//end class Slick0160b
</code>



				

</entry>

			

</row>

		

</tbody>


	

</tgroup>
</table>




	

<para id="p1075">
This is the same version of the 

<emphasis id="strong1081" effect="bold">
drawFlash

</emphasis>
 method that 
	was called to produce the blue spider in the upper-right corner of
	

<link id="a1090" target-id="Figure_2">

Figure 2

</link>

. However, in this case, the third and fourth 
	parameters specify that the spider should be drawn with a width of 262 
	pixels and a height of 256 pixels.

</para>




<para id="p1076">
More importantly, rather than passing a constant color as the last parameter,


<link id="a1091" target-id="Listing_12">

Listing 12

</link>

 passes the reference to the 

<emphasis id="strong1082" effect="bold">
Color

</emphasis>
 
object stored in the variable named 

<emphasis id="strong1083" effect="bold">
silohetteColor

</emphasis>
. Recall that 
the color represented by that object is periodically switched between white and 
blue in the 

<emphasis id="strong1084" effect="bold">
update

</emphasis>
 method of 

<link id="a1092" target-id="Listing_10">

Listing 10

</link>

. 
This causes the color of the spider to switch between white and blue.

</para>




<para id="p1077">
<emphasis id="strong1085" effect="bold">
The end of the program

</emphasis>
</para>




<para id="p1078">



<link id="a1093" target-id="Listing_12">

Listing 12

</link>

 signals the end of the 

<emphasis id="strong1086" effect="bold">
render

</emphasis>
 
method and the end of the class named 

<emphasis id="strong1087" effect="bold">
Slick0160b

</emphasis>
.

</para>






</section>
</section>
</section>
<section id="h11005">
<title>
<emphasis id="Run_the_program" effect="bold">

Run the programs

</emphasis>


</title>






<para id="p1079">
I encourage you to copy the code from 

<link id="a1094" target-id="Listing_13">

Listing 13

</link>

 and 


<link id="a1095" target-id="Listing_14">

Listing 14

</link>

. Compile the code and execute 
it, 
making changes, and observing the results of your changes. Make certain that you 
can explain why your changes behave as they do.

</para>


	

</section>
<section id="h11006">
<title>
<emphasis id="Summary" effect="bold">

Summary

</emphasis>


</title>




<para id="p1080">
In this module, you learned about using the 

<emphasis id="strong1088" effect="bold">
draw

</emphasis>
, 

<emphasis id="strong1089" effect="bold">
drawCentered

</emphasis>
, 
and 

<emphasis id="strong1090" effect="bold">
drawFlash

</emphasis>
 methods of the


<link id="a1096" url="http://slick.ninjacave.com/javadoc/org/newdawn/slick/Image.html">


Image

</link>

 class.

</para>




</section>
<section id="h11007">
<title>
<emphasis id="Whats_next" effect="bold">

What's next?

</emphasis>


</title>




<para id="p1081">
In the next module, you will learn how to use the following methods of the


<link id="a1097" url="http://slick.ninjacave.com/javadoc/org/newdawn/slick/Input.html">


Input

</link>

 class to get user input:

</para>




<list id="ul1008" list-type="bulleted">

	

<item id="li1039">
isKeyDown

</item>


	

<item id="li1040">
isMouseButtonDown

</item>


	

<item id="li1041">
getMouseX

</item>


	

<item id="li1042">
getMouseY

</item>




</list>


	

</section>
<section id="h11008">
<title>
<emphasis id="Miscellaneous" effect="bold">

Miscellaneous

</emphasis>


</title>


	

<para id="p1082">
This section contains a variety of miscellaneous information.

</para>





	

<note id="note1000" type="">


		


			


				

<emphasis id="strong1091" effect="bold">
Housekeeping material

</emphasis>

				

<list id="ul1009" list-type="bulleted">

					

<item id="li1043">
Module name: Slick0160: Using the draw and drawFlash 
					methods

</item>


					

<item id="li1044">
File: Slick0160.htm


</item>


					

<item id="li1045">
Published: 02/05/13

</item>


					

<item id="li1046">
Revised: 09/03/15

</item>


				

</list>


				

</note>

			


		



	






	

<note id="note1001" type="">


		


			


				

<emphasis id="strong1092" effect="bold">
Disclaimers:

</emphasis>
<para id="p1083">
<emphasis id="strong1093" effect="bold">
Financial

</emphasis>
: Although the Connexions
site makes it possible for you to download a PDF file for this
module at no charge, and also makes it possible for you to
purchase a pre-printed version of the PDF file, you should be
aware that some of the HTML elements in this module may not translate well into
PDF.

</para>


				

<para id="p1084">
I also want you to know that, I receive no financial compensation from the Connexions website even if you purchase 
	the PDF version of the module.

</para>


				

<para id="p1085">
In the past, unknown individuals have copied my modules from cnx.org, converted them to Kindle books, and 
				placed them for sale on Amazon.com showing me as the author. I 
				neither receive compensation for those sales nor do I know who does 
				receive compensation. If you purchase such a book, please be 
				aware that it is a copy of a module that is freely 
				available on cnx.org and that it was made and published without 
				my prior knowledge.

</para>


				

<para id="p1086">
<emphasis id="strong1094" effect="bold">
Affiliation

</emphasis>
: I am a professor of Computer Information 
	Technology at Austin Community College in Austin, TX.
	

</para>


				

</note>

			


		



	





</section>
<section id="h11009">
<title>
<emphasis id="Complete_program_listing" effect="bold">

Complete program listing

</emphasis>


</title>




<para id="p1087">
Complete listings of the programs discussed in this module are shown in


<link id="a1098" target-id="Listing_13">

Listing 13

</link>

 and 

<link id="a1099" target-id="Listing_14">

Listing 14

</link>

 
below.

</para>




	

<table id="table1015" summary="This is a table." pgwide="677">
<tgroup cols="1">


		

<thead id="thead1015">

			

<row id="tr1030">

				

<entry id="th1015">
<emphasis id="Listing_13" effect="bold">

Listing 13

</emphasis>

.  Source code for Slick0160a.java.

</entry>

			

</row>

		

</thead>


		

<tbody id="tbody1015">

			

<row id="tr1031">

				

<entry id="td1015">



<code id="pre1012" display="block">
/*Slick0160a.java
Copyright 2012, R.G.Baldwin

Calls the draw method several times in succession to
illustrate the various options available with the draw
method. Also illustrates flipping an image.

Tested using JDK 1.7 under WinXP
*********************************************************/

import org.newdawn.slick.AppGameContainer;
import org.newdawn.slick.BasicGame;
import org.newdawn.slick.GameContainer;
import org.newdawn.slick.Graphics;
import org.newdawn.slick.Image;
import org.newdawn.slick.SlickException;
import org.newdawn.slick.Color;

public class Slick0160a extends BasicGame{
  
  Image rabbit = null;
  
  float rabbitWidth;
  float rabbitHeight;

  //Frame rate we would like to see and maximum frame
  // rate we will allow.
  int targetFPS = 60;
  //----------------------------------------------------//

  public Slick0160a(){//constructor
    //Set the title
    super("Slick0160a, baldwin");
  }//end constructor
  //----------------------------------------------------//

  public static void main(String[] args)
                                    throws SlickException{
    AppGameContainer app = new AppGameContainer(
                          new Slick0160a(),512,537,false);
    app.start();
  }//end main
  //----------------------------------------------------//

  @Override
  public void init(GameContainer gc)
                                   throws SlickException {

    rabbit = new Image("rabbit.png");

    rabbitWidth = rabbit.getWidth();
    rabbitHeight = rabbit.getHeight();
  
    System.out.println(
                   "rabbitWidth: " + rabbitWidth);
    System.out.println(
                 "rabbitHeight: " + rabbitHeight);

    gc.setShowFPS(false) ;
    gc.setTargetFrameRate(targetFPS);//set frame rate
  }//end init
  //----------------------------------------------------//

  @Override
  public void update(GameContainer gc, int delta)
                                    throws SlickException{
  }//end update
  //----------------------------------------------------//

  public void render(GameContainer gc, Graphics g)
                                    throws SlickException{
    //set the drawing mode to honor transparent pixels
    g.setDrawMode(g.MODE_NORMAL);
    g.setBackground(Color.white);
    
    rabbit.draw(0f,0f);
    rabbit.draw(133f,0f,new Color(1.0f,0.0f,1.0f));
    rabbit.draw(266f,0f,0.5f);
    rabbit.draw(335f,0f,128f,192);
    
    rabbit.draw(0f,133f);
    rabbit.draw(133f,133f,32f,32f,96f,96f);
    rabbit.draw(0f,266f,256f,532f,32f,32f,96f,96f,new Color(1.0f,1.0f,0.0f));
    
    rabbit.drawCentered(399f,266f);
    

    Image tempImage = rabbit.getFlippedCopy(true,false);
    tempImage.draw(266f,399f);

  }//end render

}//end class Slick0160a
//======================================================//
</code>



				

</entry>

			

</row>

		

</tbody>


	

</tgroup>
</table>






<para id="p1088">
.

</para>




	

<table id="table1016" summary="This is a table." pgwide="677">
<tgroup cols="1">


		

<thead id="thead1016">

			

<row id="tr1032">

				

<entry id="th1016">
<emphasis id="Listing_14" effect="bold">

Listing 14

</emphasis>

.  Source code for Slick0160b.java.

</entry>

			

</row>

		

</thead>


		

<tbody id="tbody1016">

			

<row id="tr1033">

				

<entry id="td1016">



<code id="pre1013" display="block">
/*Slick0160b.java
Copyright 2012, R.G.Baldwin

Illustrates the drawFlash method to draw an image in
silhouette  format and to cause the silhouette  to switch
back and forth between two or more colors.

Tested using JDK 1.7 under WinXP
*********************************************************/

import org.newdawn.slick.AppGameContainer;
import org.newdawn.slick.BasicGame;
import org.newdawn.slick.GameContainer;
import org.newdawn.slick.Graphics;
import org.newdawn.slick.Image;
import org.newdawn.slick.SlickException;
import org.newdawn.slick.Color;

public class Slick0160b extends BasicGame{
  
  Image spider = null;
  
  float spiderWidth;
  float spiderHeight;
  
  Color silohetteColor = Color.white;
  long timeAccumulator = 0;
  long flashInterval = 128;

  //Target frame rate 
  int targetFPS = 60;
  //----------------------------------------------------//

  public Slick0160b(){//constructor
    //Set the title
    super("Slick0160b, baldwin");
  }//end constructor
  //----------------------------------------------------//

  public static void main(String[] args)
                                    throws SlickException{
    AppGameContainer app = new AppGameContainer(
                          new Slick0160b(),384,240,false);
    app.start();
  }//end main
  //----------------------------------------------------//

  @Override
  public void init(GameContainer gc)
                                   throws SlickException {

    spider = new Image("spider.png");

    spiderWidth = spider.getWidth();
    spiderHeight = spider.getHeight();
  
    System.out.println("spiderWidth: " + spiderWidth);
    System.out.println("spiderHeight: " + spiderHeight);

    gc.setShowFPS(false) ;
    gc.setTargetFrameRate(targetFPS);//set frame rate
  }//end init
  //----------------------------------------------------//

  @Override
  public void update(GameContainer gc, int delta)
                                    throws SlickException{
    timeAccumulator += delta;
    if(timeAccumulator &gt;= flashInterval){
      //Reset accumulator and change color of spider
      // silhouette 
      timeAccumulator = 0;
      if(silohetteColor.equals(Color.white)){
        silohetteColor = Color.blue;
      }else{
        silohetteColor = Color.white;
      }//end if
    }//end if
  }//end update
  //----------------------------------------------------//

  public void render(GameContainer gc, Graphics g)
                                    throws SlickException{
    //set the drawing mode to honor transparent pixels
    g.setDrawMode(g.MODE_NORMAL);
    g.setBackground(Color.red);
    
    //Draw the spider.
    spider.draw(0f,0f);
    
    //Draw a white silhouette of the spider.
    spider.drawFlash(133f,0f);
    
    //Draw a blue silhouette of the spider.
    spider.drawFlash(266f,0f,131f,128f,Color.blue);
    
    //Cause an enlarged version of the spider to flash
    // between white and blue silhouette at a rate
    // of 1/flashInterval.
    spider.drawFlash(0f,0f,262f,256f,silohetteColor);

  }//end render

}//end class Slick0160b
//======================================================//
</code>



				

</entry>

			

</row>

		

</tbody>


	

</tgroup>
</table>






<para id="p1089">
-end- 

</para>






</section>
</content>




</document>