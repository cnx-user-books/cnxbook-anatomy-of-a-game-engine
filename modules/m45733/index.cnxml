<document xmlns="http://cnx.rice.edu/cnxml"> 
<title>Slick0130: The game loop</title>
<metadata xmlns:md="http://cnx.rice.edu/mdml">
  <md:content-id>m45733</md:content-id>
  <md:title>Slick0130: The game loop</md:title>
  <md:abstract>Learn how a game program written with the Slick game library creates and maintains a game loop.</md:abstract>
  <md:uuid>0813d2c9-18fd-46c3-a6d6-2886d8fa0160</md:uuid>
</metadata>

<content>
















<section id="h11000">
<title>
Table of Contents

</title>




<list id="ul1000" list-type="bulleted">

	

<item id="li1000">
<link id="a1000" target-id="Preface">

Preface

</link>


	

<list id="ul1001" list-type="bulleted">

		

<item id="li1001">
<link id="a1001" target-id="Viewing_tip">

Viewing tip

</link>


<list id="ul1002" list-type="bulleted">

			

<item id="li1002">
<link id="a1002" target-id="Figures">

Figures

</link>


</item>


			

<item id="li1003">
<link id="a1003" target-id="Listings">

Listings

</link>


</item>


		

</list>


		

</item>


	

</list>


	

</item>


	

<item id="li1004">
<link id="a1004" target-id="Preview">

Preview

</link>

 

</item>


	

<item id="li1005">
<link id="a1005" target-id="General_background_information">

General background information

</link>


<list id="ul1003" list-type="bulleted">

		

<item id="li1006">
<link id="a1006" target-id="The_property_named_running">

The property named running

</link>


</item>


		

<item id="li1007">
<link id="a1007" target-id="The_gameLoop_method">

The gameLoop method

</link>


</item>


		

<item id="li1008">
<link id="a1008" target-id="The_updateAndRender_method">

The updateAndRender method

</link>


<list id="ul1004" list-type="bulleted">

			

<item id="li1009">
<link id="a1009" target-id="Calls_to_the_update_method">

Calls to the update method

</link>


</item>


			

<item id="li1010">
<link id="a1010" target-id="Calls_to_the_render_method">

Calls to the render method

</link>


</item>


		

</list>


		

</item>


		

<item id="li1011">
<link id="a1011" target-id="Overall_structure_of_a_game_program">

Overall structure of a game program

</link>


</item>


	

</list>


	

</item>


	

<item id="li1012">
<link id="a1012" target-id="Discussion_and_sample_code">

Discussion and sample code

</link>


<list id="ul1005" list-type="bulleted">

		

<item id="li1013">
<link id="a1013" target-id="The_program_named_Slick0130a">

The program named Slick0130a

</link>


<list id="ul1006" list-type="bulleted">

			

<item id="li1014">
<link id="a1014" target-id="The_screen_output">

The screen output

</link>


</item>


			

<item id="li1015">
<link id="a1015" target-id="Beginning_of_the_class_named_Slick0130a">

Beginning of 
			the class named Slick0130a

</link>


</item>


			

<item id="li1016">
<link id="a1016" target-id="The_main_method">

The main method

</link>


</item>


			

<item id="li1017">
<link id="a1017" target-id="The_overridden_init_method">

The overridden init method

</link>


</item>


			

<item id="li1018">
<link id="a1018" target-id="The_overridden_update_method">

The overridden update 
			method

</link>


</item>


			

<item id="li1019">
<link id="a1019" target-id="The_overridden_render_method">

The overridden render 
			method

</link>


</item>


			

<item id="li1020">
<link id="a1020" target-id="End_of_discussion">

End of discussion

</link>


</item>


		

</list>


		

</item>


	

</list>


	

</item>



	

<item id="li1021">
<link id="a1021" target-id="Run_the_program">

Run the program

</link>


</item>


	

<item id="li1022">
<link id="a1022" target-id="Summary">

Summary

</link>

 

</item>


	

<item id="li1023">
<link id="a1023" target-id="Whats_next">

What's next?

</link>


</item>


	

<item id="li1024">
<link id="a1024" target-id="Miscellaneous">

Miscellaneous

</link>


</item>


	

<item id="li1025">
<link id="a1025" target-id="Complete_program_listing">

Complete program listing

</link>


</item>




</list>


	

	

</section>
<section id="h11001">
<title>
<emphasis id="Preface" effect="bold">

Preface

</emphasis>


</title>


	

	

<para id="p1000">
This module is one in a collection of modules designed to teach you about 
	the anatomy of a game engine.

</para>




<para id="p1001">
Although the modules in this collection will concentrate on the Java game 
library named Slick2D, the 
concepts involved and the knowledge that you will gain is applicable to 
different game engines written in different programming languages as well.

</para>


	

<section id="h21000">
<title>
<emphasis id="Viewing_tip" effect="bold">

Viewing tip

</emphasis>


</title>


	

<para id="p1002">
I recommend that you open another copy of this module in a separate 
browser window and use the following links to easily find and view the Figures 
	and Listings while you are reading about them.

</para>


	

<section id="h31000">
<title>
<emphasis id="Figures" effect="bold">

Figures

</emphasis>


</title>


	

<list id="ul1007" list-type="bulleted">

		

<item id="li1026">
<link id="a1026" target-id="Figure_1">

Figure 1

</link>

. Screen output from program named Slick0130a. 

</item>



	

</list>


	

</section>
<section id="h31001">
<title>
<emphasis id="Listings" effect="bold">

Listings

</emphasis>


</title>


	

<list id="ul1008" list-type="bulleted">

		

<item id="li1027">
<link id="a1027" target-id="Listing_1">

Listing 1

</link>

. The start method of the AppGameContainer class. 

</item>


		

<item id="li1028">
<link id="a1028" target-id="Listing_2">

Listing 2

</link>

. The gameLoop method of the AppGameContainer class.

</item>


		

<item id="li1029">
<link id="a1029" target-id="Listing_3">

Listing 3

</link>

. Beginning of the updateAndRender method of the GameContainer class. 

</item>


		

<item id="li1030">
<link id="a1030" target-id="Listing_4">

Listing 4

</link>

. The remainder of the updateAndRender method of the GameContainer class. 

</item>


		

<item id="li1031">
<link id="a1031" target-id="Listing_5">

Listing 5

</link>

. Beginning of the class named Slick0130a.

</item>


		

<item id="li1032">
<link id="a1032" target-id="Listing_6">

Listing 6

</link>

. The main method.

</item>


		

<item id="li1033">
<link id="a1033" target-id="Listing_7">

Listing 7

</link>

. The overridden init method.

</item>


		

<item id="li1034">
<link id="a1034" target-id="Listing_8">

Listing 8

</link>

. The overridden update method.

</item>


		

<item id="li1035">
<link id="a1035" target-id="Listing_9">

Listing 9

</link>

. The overridden render method.

</item>


		

<item id="li1036">
<link id="a1036" target-id="Listing_10">

Listing 10

</link>

. Source code for the program named Slick0130a.

</item>


	

</list>


	

</section>
</section>
</section>
<section id="h11002">
<title>
<emphasis id="Preview" effect="bold">

Preview

</emphasis>


</title>




<para id="p1003">
<emphasis id="strong1000" effect="bold">
What you have learned

</emphasis>
</para>




<para id="p1004">
The main purpose of this and the previous module is to analyze the behavior 
of the Slick2D game engine when you call the 

<emphasis id="strong1001" effect="bold">
start

</emphasis>
 method to 
cause a Slick2D game program to start running.

</para>




<para id="p1005">
In the previous module, you learned how and why you should extend the 

<emphasis id="strong1002" effect="bold">

BasicGame

</emphasis>
 class instead of implementing the 

<emphasis id="strong1003" effect="bold">
Game

</emphasis>
 
interface directly.

</para>




<para id="p1006">
You learned about the behavior of the constructors for the 

<emphasis id="strong1004" effect="bold">

AppGameContainer

</emphasis>
 class.

</para>




<para id="p1007">
You learned that the 

<emphasis id="strong1005" effect="bold">
start

</emphasis>
 method of the 

<emphasis id="strong1006" effect="bold">

AppGameContainer

</emphasis>
 class 

<emphasis id="em1000" effect="italics">
(see 

</emphasis>
<link id="a1037" target-id="Listing_1">


<emphasis id="em1001" effect="italics">
Listing 1

</emphasis>
</link>

) calls the following three methods:

</para>




<list id="ul1009" list-type="bulleted">

	

<item id="li1037">
setup

</item>


	

<item id="li1038">
getDelta

</item>


	

<item id="li1039">
gameLoop

</item>




</list>




<para id="p1008">
You learned about the behavior of the 

<emphasis id="strong1007" effect="bold">
setup

</emphasis>
 and 

<emphasis id="strong1008" effect="bold">

getDelta

</emphasis>
 methods.

</para>




<para id="p1009">
<emphasis id="strong1009" effect="bold">
What you will learn

</emphasis>
</para>




<para id="p1010">
I will explain the overall behavior of the 

<emphasis id="strong1010" effect="bold">
gameLoop

</emphasis>
 method in this module. 

</para>




<para id="p1011">
In addition, you will learn

</para>




<list id="ul1010" list-type="bulleted">

	

<item id="li1040">
about a property of the 

<emphasis id="strong1011" effect="bold">
GameContainer

</emphasis>
 class 
named 

<emphasis id="strong1012" effect="bold">
running

</emphasis>
, and how it is used by the 

<emphasis id="strong1013" effect="bold">
start

</emphasis>
 
	method to keep the game loop running,

</item>


	

<item id="li1041">
about the salient features of the 

<emphasis id="strong1014" effect="bold">
gameLoop

</emphasis>
 
method of the 

<emphasis id="strong1015" effect="bold">
AppGameContainer

</emphasis>
 class,

</item>


	

<item id="li1042">
about the 

<emphasis id="strong1016" effect="bold">
updateAndRender

</emphasis>
 method of the 

<emphasis id="strong1017" effect="bold">
GameContainer

</emphasis>
 class and how it decides when and if to call the 
	

<emphasis id="strong1018" effect="bold">
update

</emphasis>
 and 

<emphasis id="strong1019" effect="bold">
render

</emphasis>
 methods of the object of the 
	

<emphasis id="strong1020" effect="bold">
Game

</emphasis>
 class that is wrapped in the container,

</item>


	

<item id="li1043">
about the difference between normal delta and smoothed delta,

</item>


	

<item id="li1044">
about 

<emphasis id="strong1021" effect="bold">
minimumLogicInterval

</emphasis>
 and 

<emphasis id="strong1022" effect="bold">

	maximumLogicInterval 

</emphasis>
and how the contents of those two variables are 
used to determine if, when, and how many times to call the 

<emphasis id="strong1023" effect="bold">
update

</emphasis>
 
	method during each iteration of the game loop,

</item>


	

<item id="li1045">
how the contents of 

<emphasis id="strong1024" effect="bold">
minimumLogicInterval

</emphasis>
 and 
	

<emphasis id="strong1025" effect="bold">
maximumLogicInterval

</emphasis>
 are used to determine the value that 
	is passed as delta each time the 

<emphasis id="strong1026" effect="bold">
update

</emphasis>
 method is called,

</item>


	

<item id="li1046">
that the 

<emphasis id="strong1027" effect="bold">
render

</emphasis>
 method is normally called once and only 
	once during each iteration of the game loop,

</item>


	

<item id="li1047">
how you can use the value of delta that is received by the 

<emphasis id="strong1028" effect="bold">

	update

</emphasis>
 method to control the behavior of a game program,

</item>


	

<item id="li1048">
that you can set the size of the game window when you instantiate an 
	object of the 

<emphasis id="strong1029" effect="bold">
AppGameContainer

</emphasis>
 class by passing dimension 
	parameters to the constructor,

</item>


	

<item id="li1049">
that you can set the target frame rate by calling the 

<emphasis id="strong1030" effect="bold">

	setTargetFrameRate

</emphasis>
 method on the 

<emphasis id="strong1031" effect="bold">
GameContainer

</emphasis>
 
	object, and

</item>


	

<item id="li1050">
how to display text in the game window.

</item>




</list>


	

</section>
<section id="h11003">
<title>
<emphasis id="General_background_information" effect="bold">

General 
	background information

</emphasis>


</title>




<para id="p1012">
As you learned in the previous module, the 

<emphasis id="strong1032" effect="bold">
start

</emphasis>
 method 


<emphasis id="em1002" effect="italics">
(see 

</emphasis>
<link id="a1038" target-id="Listing_1">


<emphasis id="em1003" effect="italics">
Listing 1

</emphasis>
</link>

) calls the 

<emphasis id="strong1033" effect="bold">
setup

</emphasis>
 method and then calls the 

<emphasis id="strong1034" effect="bold">
getDelta

</emphasis>
 
method. Following that, it calls the 

<emphasis id="strong1035" effect="bold">
gameLoop

</emphasis>
 method as 
described below.

</para>




<section id="h21001">
<title>
<emphasis id="The_property_named_running" effect="bold">

The property named running

</emphasis>


</title>




<para id="p1013">
The 

<emphasis id="strong1036" effect="bold">
GameContainer

</emphasis>
 class declares a protected 

<emphasis id="strong1037" effect="bold">
boolean

</emphasis>
 
variable named 

<emphasis id="strong1038" effect="bold">
running

</emphasis>
, which is inherited into the object of 
the 

<emphasis id="strong1039" effect="bold">
AppGameContainer

</emphasis>
 class. The descriptive comment reads 

<emphasis id="em1004" effect="italics">

"True if we're currently running the game loop."

</emphasis>
 

</para>




<para id="p1014">
The initial value of this variable is true and as near as I can tell, it only 
goes false 

</para>




<list id="ul1011" list-type="bulleted">

	

<item id="li1051">
when the 

<emphasis id="strong1040" effect="bold">
exit

</emphasis>
 method is called, 

</item>


	

<item id="li1052">
when the 

<emphasis id="strong1041" effect="bold">
closeRequested

</emphasis>
 method is called and returns 
	true, or
	

</item>


	

<item id="li1053">
when some 
code in the game throws a 

<emphasis id="strong1042" effect="bold">
SlickException

</emphasis>
.

</item>




</list>




<para id="p1015">
<emphasis id="strong1043" effect="bold">
Calling the gameLoop method

</emphasis>
</para>




<para id="p1016">
The 

<emphasis id="strong1044" effect="bold">
start

</emphasis>
 method in 

<link id="a1039" target-id="Listing_1">

Listing 1

</link>

 shows a call to the 

<emphasis id="strong1045" effect="bold">
gameLoop

</emphasis>
 
method inside a 

<emphasis id="strong1046" effect="bold">
while

</emphasis>
 loop with a call to the 

<emphasis id="strong1047" effect="bold">
running

</emphasis>
 
method as the 
conditional clause.

</para>


	


	

<table id="table1000" summary="This is a table." pgwide="677">
<tgroup cols="1">


		

<thead id="thead1000">

			

<row id="tr1000">

				

<entry id="th1000">
<emphasis id="Listing_1" effect="bold">

Listing 1

</emphasis>

. The start method of the AppGameContainer class. 

</entry>

			

</row>

		

</thead>


		

<tbody id="tbody1000">

			

<row id="tr1001">

				

<entry id="td1000">



<code id="pre1000" display="block">
  public void start() throws SlickException {
    try {
      setup();
      
      getDelta();
      while (running()) {
        gameLoop();
      }
    } finally {
      destroy();
    }
    
    if (forceExit) {
      System.exit(0);
    }
  }//end start
</code>



				

</entry>

			

</row>

		

</tbody>


	

</tgroup>
</table>




	

<para id="p1017">
As you can see in 

<link id="a1040" target-id="Listing_1">

Listing 1

</link>

, the 

<emphasis id="strong1048" effect="bold">
gameLoop

</emphasis>
 method is called repeatedly 
	while the variable named 

<emphasis id="strong1049" effect="bold">
running

</emphasis>
 is true. Each time it 
	returns, it is called again. 

</para>




<para id="p1018">
I will refer to 
	each call to the 

<emphasis id="strong1050" effect="bold">
gameLoop

</emphasis>
 method as one iteration of the 
	game loop in the discussion that follows.

</para>




</section>
<section id="h21002">
<title>
<emphasis id="The_gameLoop_method" effect="bold">

The gameLoop method

</emphasis>


</title>




<para id="p1019">
The 

<emphasis id="strong1051" effect="bold">
gameLoop

</emphasis>
 method of the 

<emphasis id="strong1052" effect="bold">
AppGameContainer

</emphasis>
 class is shown in


<link id="a1041" target-id="Listing_2">

Listing 2

</link>

.

</para>


	


	

<table id="table1001" summary="This is a table." pgwide="677">
<tgroup cols="1">


		

<thead id="thead1001">

			

<row id="tr1002">

				

<entry id="th1001">
<emphasis id="Listing_2" effect="bold">

Listing 2

</emphasis>

. The gameLoop method of the AppGameContainer class.

</entry>

			

</row>

		

</thead>


		

<tbody id="tbody1001">

			

<row id="tr1003">

				

<entry id="td1001">



<code id="pre1001" display="block">
  protected void gameLoop() throws SlickException {
    int delta = getDelta();
    if (!Display.isVisible() &amp;&amp; updateOnlyOnVisible) {
      try { Thread.sleep(100); } catch (Exception e) {}
    } else {
      try {
        updateAndRender(delta);
      } catch (SlickException e) {
        Log.error(e);
        running = false;
        return;
      }//end catch
    }//end else

    updateFPS();

    Display.update();
    
    if (Display.isCloseRequested()) {
      if (game.closeRequested()) {
        running = false;
      }//end if
    }//end if
  }//end gameLoop method
</code>



				

</entry>

			

</row>

		

</tbody>


	

</tgroup>
</table>




	

<para id="p1020">
<emphasis id="strong1053" effect="bold">
A verbal description

</emphasis>
</para>




<para id="p1021">
This is my verbal description of what happens each time the 

<emphasis id="strong1054" effect="bold">
start

</emphasis>
 
method calls the 

<emphasis id="strong1055" effect="bold">
gameLoop

</emphasis>
 method.

</para>




<para id="p1022">
First the 

<emphasis id="strong1056" effect="bold">
gameLoop

</emphasis>
 method gets the value for delta 

<emphasis id="em1005" effect="italics">
(the elapsed time since 
the call to the gameLoop method during the previous iteration of the game loop)

</emphasis>
.

</para>


	

<para id="p1023">
If the display 

<emphasis id="em1006" effect="italics">
(the game window)

</emphasis>
 is not visible and a property 
	named 

<emphasis id="strong1057" effect="bold">
updateOnlyOnVisible

</emphasis>
 is true, the 

<emphasis id="strong1058" effect="bold">
gameLoop

</emphasis>
 
	method takes appropriate action. I will leave it as an exercise for 
	interested students to analyze those actions. 

<emphasis id="em1007" effect="italics">
(The program goes to sleep 
	for 100 milliseconds.)

</emphasis>
</para>




<para id="p1024">
If the display is visible, the 

<emphasis id="strong1059" effect="bold">
gameLoop

</emphasis>
 method calls the 


<emphasis id="strong1060" effect="bold">
updateAndRender
	

</emphasis>
method of the 

<emphasis id="strong1061" effect="bold">
GameContainer

</emphasis>
 class passing delta as a parameter. Upon return, the 

<emphasis id="strong1062" effect="bold">
gameLoop

</emphasis>
 
method performs some housekeeping tasks and terminates. 

</para>




</section>
<section id="h21003">
<title>
<emphasis id="The_updateAndRender_method" effect="bold">

The updateAndRender method

</emphasis>


</title>


	

<para id="p1025">
<link id="a1042" target-id="Listing_3">

Listing 3

</link>

 shows the beginning of the 

<emphasis id="strong1063" effect="bold">

	updateAndRender

</emphasis>
 method of the 

<emphasis id="strong1064" effect="bold">
GameContainer

</emphasis>
 class.
	This is the code that controls calls to the
	

<emphasis id="strong1065" effect="bold">
update

</emphasis>
 method. The code that controls calls to the 

<emphasis id="strong1066" effect="bold">

	render

</emphasis>
 method is shown in 

<link id="a1043" target-id="Listing_4">

Listing 4

</link>

 later.

</para>




	

<table id="table1002" summary="This is a table." pgwide="677">
<tgroup cols="1">


		

<thead id="thead1002">

			

<row id="tr1004">

				

<entry id="th1002">
<emphasis id="Listing_3" effect="bold">

Listing 3

</emphasis>

. Beginning of the updateAndRender method of the GameContainer class. 

</entry>

			

</row>

		

</thead>


		

<tbody id="tbody1002">

			

<row id="tr1005">

				

<entry id="td1002">



<code id="pre1002" display="block">
  protected void updateAndRender(int delta) 
                                   throws SlickException {
    if (smoothDeltas) {
      if (getFPS() != 0) {
        delta = 1000 / getFPS();
      }//end if
    }//end if
    
    input.poll(width, height);
    
    Music.poll(delta);
    if (!paused) {
      storedDelta += delta;
      
      if (storedDelta &gt;= minimumLogicInterval) {
        try {
          if (maximumLogicInterval != 0) {
            long cycles = 
                       storedDelta / maximumLogicInterval;
            for (int i=0;i&lt;cycles;i++) {
              game.update(this,(int)maximumLogicInterval);
            }//end for loop
            
            int remainder = 
                      (int)(delta % maximumLogicInterval);
            if (remainder &gt; minimumLogicInterval) {
              game.update(
                this,(int)(delta % maximumLogicInterval));
              storedDelta = 0;
            } else {
              storedDelta = remainder;
            }//end else
          } else {
            game.update(this, (int) storedDelta);
            storedDelta = 0;
          }//end else
          
        } catch (Throwable e) {
          Log.error(e);
          throw new SlickException(
          "Game.update() failure - check the game code.");
        }//end catch
      }//end if on minimumLogicInterval
    } else {
      game.update(this, 0);
    }//end else
</code>



				

</entry>

			

</row>

		

</tbody>


	

</tgroup>
</table>




	

<para id="p1026">
<emphasis id="strong1067" effect="bold">
Another verbal description

</emphasis>
</para>




<para id="p1027">
This is my verbal description of what happens when the 

<emphasis id="strong1068" effect="bold">

	gameLoop

</emphasis>
 method calls the 

<emphasis id="strong1069" effect="bold">
updateAndRender

</emphasis>
 method. 
	

</para>




<para id="p1028">
<emphasis id="em1008" effect="italics">
(I will not discuss those actions that represent communication with 
	the hardware via the Lightweight Java Game Library (lwjgl) as well as a few 
other housekeeping actions)

</emphasis>
.

</para>




<para id="p1029">
The 

<emphasis id="strong1070" effect="bold">
updateAndRender

</emphasis>
 method begins by selecting between normal delta and 

<emphasis id="em1009" effect="italics">
"smooth deltas." 

</emphasis>
</para>




<para id="p1030">
<emphasis id="em1010" effect="italics">
(Smooth delta values 
essentially represent a moving average of individual delta values computed in a 
somewhat roundabout way.)

</emphasis>
</para>




<para id="p1031">
<emphasis id="strong1071" effect="bold">
Calling the update and render methods

</emphasis>
</para>




<para id="p1032">
The 

<emphasis id="strong1072" effect="bold">
update

</emphasis>
 method of the 

<emphasis id="strong1073" effect="bold">
Game

</emphasis>
 object will be called 
none, one, or 
more times during each iteration of the game loop on the basis of the contents 
of two variables named 

<emphasis id="strong1074" effect="bold">
minimumLogicInterval

</emphasis>
 and 

<emphasis id="strong1075" effect="bold">
maximumLogicInterval

</emphasis>
. 

</para>




<para id="p1033">
The default value for 

<emphasis id="strong1076" effect="bold">
minimumLogicInterval

</emphasis>
 is 1. The default 
value for 

<emphasis id="strong1077" effect="bold">
maximumLogicInterval

</emphasis>
 is 0. Methods are provided by 
which you can change the values of these two variables.

</para>




<para id="p1034">
The 

<emphasis id="strong1078" effect="bold">
render

</emphasis>
 method of the 

<emphasis id="strong1079" effect="bold">
Game

</emphasis>
 object will be called only 
once during each iteration of the game loop following the call or calls to the


<emphasis id="strong1080" effect="bold">
update

</emphasis>
 method. 

</para>




<section id="h31002">
<title>
<emphasis id="Calls_to_the_update_method" effect="bold">

Calls to the update method

</emphasis>


</title>




<para id="p1035">
If the 

<emphasis id="strong1081" effect="bold">
paused

</emphasis>
 property is true, the 

<emphasis id="strong1082" effect="bold">
update

</emphasis>
 
method is called once passing a value of zero for delta. Otherwise, the value of
delta is added to the contents of a variable named 

<emphasis id="strong1083" effect="bold">

storedDelta

</emphasis>
 for the purpose of accumulating 
individual delta values.

</para>




<para id="p1036">
Then the method enters a somewhat complex logic process, which I will 
describe as follows:

</para>




<list id="ul1012" list-type="bulleted">

	

<item id="li1054">
If 

<emphasis id="strong1084" effect="bold">
storedDelta

</emphasis>
 is less than 

<emphasis id="strong1085" effect="bold">

	minimumLogicInterval

</emphasis>
, don't call 

<emphasis id="strong1086" effect="bold">
update

</emphasis>
 during this iteration of 
	the game loop.

</item>


	

<item id="li1055">
If 

<emphasis id="strong1087" effect="bold">
storedDelta

</emphasis>
 is greater than or equal to 

<emphasis id="strong1088" effect="bold">

	minimumLogicInterval

</emphasis>
 and 

<emphasis id="strong1089" effect="bold">
maximumLogicInterval

</emphasis>
 has 
	a value of 0, call the 

<emphasis id="strong1090" effect="bold">
update

</emphasis>
 method once passing
	

<emphasis id="strong1091" effect="bold">
storedDelta

</emphasis>
 as a parameter. Then set 

<emphasis id="strong1092" effect="bold">

	storedDelta

</emphasis>
 to zero to set the accumulated value back to 0.

</item>


	

<item id="li1056">
If 

<emphasis id="strong1093" effect="bold">
storedDelta

</emphasis>
 is greater than 

<emphasis id="strong1094" effect="bold">

	minimumLogicInterval

</emphasis>
 and 

<emphasis id="strong1095" effect="bold">
maximumLogicInterval

</emphasis>
 is 
	not equal to zero, call the 

<emphasis id="strong1096" effect="bold">
update

</emphasis>
 method several 
	times in succession 

<emphasis id="em1011" effect="italics">
(if needed)

</emphasis>
 during this iteration of the game 
	loop, passing a value for delta during each call that is less than or equal 
	to 

<emphasis id="strong1097" effect="bold">
storedDelta

</emphasis>
. Continue this process until the sum of the
	delta values passed in the method calls equals 

<emphasis id="strong1098" effect="bold">

	storedDelta

</emphasis>
.

</item>




</list>




<para id="p1037">
<emphasis id="strong1099" effect="bold">
Possible outcomes

</emphasis>
</para>




<para id="p1038">
This algorithm results in the following possible outcomes regarding calls to the


<emphasis id="strong1100" effect="bold">
update

</emphasis>
 method during each iteration of the game loop prior to 
calling the 

<emphasis id="strong1101" effect="bold">
render

</emphasis>
 method:

</para>




<list id="ol1000" list-type="enumerated">

	

<item id="li1057">
<emphasis id="No_call_at_all" effect="bold">

No call at all

</emphasis>

.

</item>


	

<item id="li1058">
<emphasis id="One_call_with_a_delta_value_of_zero" effect="bold">

One call with a delta 
	value of zero

</emphasis>

.

</item>


	

<item id="li1059">
<emphasis id="One_call_with_a_non-zero_value_for_delta" effect="bold">

One call with a 
	non-zero value for delta

</emphasis>

.

</item>


	

<item id="li1060">
<emphasis id="Multiple_calls_each_with_a_non-zero_value_for_delta" effect="bold">

Multiple 
	calls, each with a non-zero value for delta

</emphasis>

.

</item>




</list>




<para id="p1039">
<emphasis id="strong1102" effect="bold">
Analysis of the outcomes

</emphasis>
</para>




<para id="p1040">
<link id="a1044" target-id="No_call_at_all">

Item 1

</link>

 represents a situation where you don't 
want to execute 

<emphasis id="strong1103" effect="bold">
update

</emphasis>
 code for values of delta 
that are below a certain threshold and you prefer to execute 

<emphasis id="strong1104" effect="bold">
update

</emphasis>
 
code less frequently using accumulated values of delta instead.

</para>




<para id="p1041">
<link id="a1045" target-id="One_call_with_a_delta_value_of_zero">

Item 2

</link>

 represents a 
situation where the 

<emphasis id="strong1105" effect="bold">
paused

</emphasis>
 property has been set to true and no 
updates should be performed. 

<emphasis id="em1012" effect="italics">
(This situation is indicated by a delta value 
of zero, which can be tested by code in the update method.)

</emphasis>
</para>




<para id="p1042">
<link id="a1046" target-id="One_call_with_a_non-zero_value_for_delta">

Item 3

</link>

 represents a 
situation where you are willing to execute the code in the 

<emphasis id="strong1106" effect="bold">
update

</emphasis>
 
method once during each iteration of the game loop using the incoming value of
delta.

</para>




<para id="p1043">
<link id="a1047" target-id="Multiple_calls_each_with_a_non-zero_value_for_delta">

Item 4

</link>

 
represents a situation where you need to execute the code in the 

<emphasis id="strong1107" effect="bold">
update

</emphasis>
 
method two or more times in succession during each iteration of the game loop 
with the total value of delta being divided into smaller 
values.

</para>




</section>
<section id="h31003">
<title>
<emphasis id="Calls_to_the_render_method" effect="bold">

Calls to the render method

</emphasis>


</title>




<para id="p1044">
The situation regarding calls to the 

<emphasis id="strong1108" effect="bold">
render

</emphasis>
 method, as shown in


<link id="a1048" target-id="Listing_4">

Listing 4

</link>

, is much less 
complicated. 

</para>




	

<table id="table1003" summary="This is a table." pgwide="677">
<tgroup cols="1">


		

<thead id="thead1003">

			

<row id="tr1006">

				

<entry id="th1003">
<emphasis id="Listing_4" effect="bold">

Listing 4

</emphasis>

. The remainder of the updateAndRender method of the GameContainer class.

</entry>

			

</row>

		

</thead>


		

<tbody id="tbody1003">

			

<row id="tr1007">

				

<entry id="td1003">



<code id="pre1003" display="block">
    if (hasFocus() || getAlwaysRender()) {
      if (clearEachFrame) {
        GL.glClear(SGL.GL_COLOR_BUFFER_BIT | 
                                 SGL.GL_DEPTH_BUFFER_BIT);
      }//end if
      
      GL.glLoadIdentity();
      
      graphics.resetFont();
      graphics.resetLineWidth();
      graphics.setAntiAlias(false);
      try {
        game.render(this, graphics);
      } catch (Throwable e) {
        Log.error(e);
        throw new SlickException(
          "Game.render() failure - check the game code.");
      }//end catch
      graphics.resetTransform();
      
      if (showFPS) {
        defaultFont.drawString(10,10,"FPS: "+recordedFPS);
      }//end if
      
      GL.flush();
    }//end if on hasFocus
    
    if (targetFPS != -1) {
      Display.sync(targetFPS);
    }//end if
  }//end method updateAndRender
</code>



				

</entry>

			

</row>

		

</tbody>


	

</tgroup>
</table>




	

<para id="p1045">
<emphasis id="strong1109" effect="bold">
One call per iteration of the game loop

</emphasis>
</para>




<para id="p1046">
Although there is some tedious housekeeping code in


<link id="a1049" target-id="Listing_4">

Listing 4

</link>

, one call 
to the 

<emphasis id="strong1110" effect="bold">
render

</emphasis>
 
method is made during each iteration of the game loop provided that the game 
window has the focus or a property named 

<emphasis id="strong1111" effect="bold">
alwaysRender

</emphasis>
 is true. 

</para>




<para id="p1047">
<emphasis id="em1013" effect="italics">
(The default value for 

</emphasis>
<emphasis id="strong1112" effect="bold">
<emphasis id="em1014" effect="italics">
alwaysRender

</emphasis>
</emphasis>
<emphasis id="em1015" effect="italics">
 is 
false, but a public method is provided to set its value to true or false.)

</emphasis>
</para>




</section>
</section>
<section id="h21004">
<title>
<emphasis id="Overall_structure_of_a_game_program" effect="bold">

Overall structure of a game 
program

</emphasis>


</title>




<para id="p1048">
Although the Slick2D library can be used in a variety of ways to create game 
programs, the overall structure for 

<emphasis id="one_approach" effect="bold">

one approach

</emphasis>

 looks 
something like the following.

</para>




<list id="ul1013" list-type="bulleted">

	

<item id="li1061">
Define a class with a 

<emphasis id="strong1113" effect="bold">
main

</emphasis>
 method.

</item>


	

<item id="li1062">
Cause the 

<emphasis id="strong1114" effect="bold">
main

</emphasis>
 method to instantiate an object of the
	

<emphasis id="strong1115" effect="bold">
BasicGame

</emphasis>
 class.

</item>


	

<item id="li1063">
Cause the 

<emphasis id="strong1116" effect="bold">
main

</emphasis>
 method to instantiate an object of the
	

<emphasis id="strong1117" effect="bold">
AppGameContainer

</emphasis>
 class, passing the 

<emphasis id="strong1118" effect="bold">
BasicGame

</emphasis>
 
object's reference as a parameter to the constructor for 

<emphasis id="strong1119" effect="bold">
AppGameContainer

</emphasis>
.

</item>


	

<item id="li1064">
Cause the 

<emphasis id="strong1120" effect="bold">
main

</emphasis>
 method to call the 

<emphasis id="strong1121" effect="bold">
start

</emphasis>
 
method on the 

<emphasis id="strong1122" effect="bold">
AppGameContainer

</emphasis>
 object.

</item>


	

<item id="li1065">
Override the 

<emphasis id="strong1123" effect="bold">
init

</emphasis>
 method inherited from the 

<emphasis id="strong1124" effect="bold">
Basic

</emphasis>
 
game class to initialize the state of your game. This method will be called once 
by default before the game loop begins.

</item>


	

<item id="li1066">
Override the 

<emphasis id="strong1125" effect="bold">
update

</emphasis>
 method to update the state of your game 
during each iteration of the game loop. Use the incoming value of delta for 
timing control. The 

<emphasis id="strong1126" effect="bold">
update

</emphasis>
 method will be called none, one, or more times during each 
iteration of the game loop as described earlier.

</item>


	

<item id="li1067">
Override the 

<emphasis id="strong1127" effect="bold">
render

</emphasis>
 method to draw the state of your game in 
the game window once during each iteration of the game loop.

</item>


	

<item id="li1068">
Optionally override the inherited 

<emphasis id="strong1128" effect="bold">
getTitle

</emphasis>
 and 

<emphasis id="strong1129" effect="bold">

	closeRequested

</emphasis>
 methods if needed.

</item>


	

<item id="li1069">
Using the Slick2D 

<link id="a1050" url="http://slick.ninjacave.com/javadoc/">

javadocs

</link>

 and 
the Java 

<link id="a1051" url="http://docs.oracle.com/javase/7/docs/api/index.html">

javadocs

</link>


	

<emphasis id="em1016" effect="italics">
(or a later version)

</emphasis>
 as a guide, write code into your constructor, your 
	

<emphasis id="strong1130" effect="bold">
main

</emphasis>
 method, and your overridden methods to tailor the behavior of your game 
program to your liking.

</item>




</list>


	

	

</section>
</section>
<section id="h11004">
<title>
<emphasis id="Discussion_and_sample_code" effect="bold">

Discussion and sample code

</emphasis>


</title>


	

	

<para id="p1049">
By now, you should have a pretty good understanding of the basics of 
	writing a game program using Slick2D using the approach described
	

<link id="a1052" target-id="one_approach">

above

</link>

.

</para>




<para id="p1050">
Previous modules have presented skeleton code for writing such a program. In 
this module, I will present and discuss a program that has a little more meat on 
that skeleton's bones to illustrate a few more concepts. Future modules will dig 
much more deeply into the capabilities provided by the Slick2D library.

</para>




<section id="h21005">
<title>
<emphasis id="The_program_named_Slick0130a" effect="bold">

The program named Slick0130a

</emphasis>


</title>




<para id="p1051">
<link id="a1053" target-id="Listing_10">

Listing 10

</link>

 provides a complete listing for the program named 

<emphasis id="strong1131" effect="bold">

Slick0130a

</emphasis>
. I will explain the differences between this program and the 
skeleton programs presented in earlier modules. Before getting into the code 
details, however, I will show you the output produced by the program.

</para>




<section id="h31004">
<title>
<emphasis id="The_screen_output" effect="bold">

The screen output

</emphasis>


</title>




<para id="p1052">
<link id="a1054" target-id="Figure_1">

Figure 1

</link>

 shows a screen shot of the output in the 
game window while the program is running.

</para>







<table id="table1004" summary="This is a table." pgwide="1">
<tgroup cols="1">


<thead id="thead1004">
<row id="tr1008">
<entry id="th1004">



<emphasis id="Figure_1" effect="bold">

Figure 1

</emphasis>

. Screen output from program named Slick0130a.


</entry>
</row>
</thead>


<tbody id="tbody1004">
<row id="tr1009">
<entry id="td1004">



<media id="media1000" alt="Missing image." display="block">
<image id="img1000" mime-type="image/jpeg" src="../../media/slick0130a1.jpg" width="407" height="241"/>
</media>




</entry>
</row>
</tbody>


</tgroup>
</table>






<para id="p1053">
<emphasis id="strong1132" effect="bold">
The frame rate

</emphasis>
</para>




<para id="p1054">
The text in the upper-left corner of 

<link id="a1055" target-id="Figure_1">

Figure 1

</link>

 is the rate in frames per second that the 
game loop is running. 

<emphasis id="em1017" effect="italics">
(Two frames per second in this case.)

</emphasis>
 This value is placed there by default. The 

<emphasis id="strong1133" effect="bold">
GameContainer

</emphasis>
 
class provides a public method named 

<emphasis id="strong1134" effect="bold">
setShowFPS

</emphasis>
 that you can 
call whenever you have access to the 

<emphasis id="strong1135" effect="bold">
AppGameContainer

</emphasis>
 object to 
disable or enable the display of this information.

</para>




<para id="p1055">
The reported value for FPS is always an integer. On my computer, it bounces back and forth between 2 and 3 frames per 
second when this program is running.

</para>




<para id="p1056">
<emphasis id="strong1136" effect="bold">
The total elapsed time

</emphasis>
</para>




<para id="p1057">
The first line of text near the center of 

<link id="a1056" target-id="Figure_1">

Figure 1

</link>

 
shows the computed value of the total elapsed time in seconds since the game 
loop started running. As you will see later, this value is computed by 
accumulating 
successive values of the incoming 

<emphasis id="strong1137" effect="bold">
delta

</emphasis>
 parameter in the 

<emphasis id="strong1138" effect="bold">
update

</emphasis>
 method.

</para>




<para id="p1058">
If you compile and run this program, you should see this value counting up in 
one-half second increments, which is consistent with a frame rate of two frames 
per second.

</para>




<para id="p1059">
<emphasis id="strong1139" effect="bold">
The value of delta

</emphasis>
</para>




<para id="p1060">
The second line of text near the center of 

<link id="a1057" target-id="Figure_1">

Figure 1

</link>

 
shows the value of delta received by the most recent call to the 

<emphasis id="strong1140" effect="bold">
update

</emphasis>
 method. On my 
computer, this value seems to range between 499 and 501 milliseconds, which is 
consistent with a frame rate of two frames per second.

</para>




</section>
<section id="h31005">
<title>
<emphasis id="Beginning_of_the_class_named_Slick0130a" effect="bold">

Beginning of the class 
named Slick0130a

</emphasis>


</title>




<para id="p1061">
<link id="a1058" target-id="Listing_5">

Listing 5

</link>

 shows the beginning of the class named


<emphasis id="strong1141" effect="bold">
Slick0130a

</emphasis>
 
including the declaration of some instance variables and the constructor.

</para>




	

<table id="table1005" summary="This is a table." pgwide="677">
<tgroup cols="1">


		

<thead id="thead1005">

			

<row id="tr1010">

				

<entry id="th1005">
<emphasis id="Listing_5" effect="bold">

Listing 5

</emphasis>

. Beginning of the class named Slick0130a.

</entry>

			

</row>

		

</thead>


		

<tbody id="tbody1005">

			

<row id="tr1011">

				

<entry id="td1005">



<code id="pre1004" display="block">
public class Slick0130a extends BasicGame{
  
  //Instance variables for use in computing and
  // displaying total time since program start and
  // time for each frame.
  double totalTime = 0;
  int incrementalTime = 0;

  public Slick0130a(){
    //Call to superclass constructor is required.
    super("Slick0130a, Baldwin.");
  }//end constructor
</code>



				

</entry>

			

</row>

		

</tbody>


	

</tgroup>
</table>




	

<para id="p1062">
The instance variables that are declared in 

<link id="a1059" target-id="Listing_5">

Listing 
	5

</link>

 are used to compute and display the values shown near the center of
	

<link id="a1060" target-id="Figure_1">

Figure 1

</link>

.

</para>


	


</section>
<section id="h31006">
<title>
<emphasis id="The_main_method" effect="bold">

The main method

</emphasis>


</title>




<para id="p1063">
<link id="a1061" target-id="Listing_6">

Listing 6

</link>

 shows the 

<emphasis id="strong1142" effect="bold">
main

</emphasis>
 method for 
the program named 

<emphasis id="strong1143" effect="bold">
Slick0130a

</emphasis>
.

</para>


	


	

<table id="table1006" summary="This is a table." pgwide="677">
<tgroup cols="1">


		

<thead id="thead1006">

			

<row id="tr1012">

				

<entry id="th1006">
<emphasis id="Listing_6" effect="bold">

Listing 6

</emphasis>

. The main method.

</entry>

			

</row>

		

</thead>


		

<tbody id="tbody1006">

			

<row id="tr1013">

				

<entry id="td1006">



<code id="pre1005" display="block">
  public static void main(String[] args)
                                    throws SlickException{
    try{
      AppGameContainer app = (
                       new AppGameContainer(
                         new Slick0130a(),400,200,false));
      app.start();
    }catch(SlickException e){
      e.printStackTrace();
    }//end catch
  }//end main
</code>



				

</entry>

			

</row>

		

</tbody>


	

</tgroup>
</table>




	

<para id="p1064">
<emphasis id="strong1144" effect="bold">
A different constructor

</emphasis>
</para>




<para id="p1065">
<link id="a1062" target-id="Listing_6">

Listing 6

</link>

 calls a different overloaded constructor 
for the 

<emphasis id="strong1145" effect="bold">
AppGameContainer

</emphasis>
 class than I have used in earlier modules.

</para>




<para id="p1066">
This version of the constructor allows for setting the width and height of 
the game window. In this case, the game window is set to a width of 400 pixels 
and a height of 200 pixels as shown in 

<link id="a1063" target-id="Figure_1">

Figure 1

</link>

.

</para>




<para id="p1067">
The last parameter to this constructor is described as a 

<emphasis id="strong1146" effect="bold">
boolean

</emphasis>
 
parameter that allows for the selection of a full-screen game window. As of this 
writing, I have been unable to get this to work. When I set the third parameter 
to true, I get a compiler error. However, I haven't spent any time investigating 
what I might be doing wrong.

</para>




</section>
<section id="h31007">
<title>
<emphasis id="The_overridden_init_method" effect="bold">

The overridden init method

</emphasis>


</title>




<para id="p1068">
The overridden 

<emphasis id="strong1147" effect="bold">
init

</emphasis>
 method is shown in 

<link id="a1064" target-id="Listing_7">


Listing 7

</link>

.

</para>




	

<table id="table1007" summary="This is a table." pgwide="677">
<tgroup cols="1">


		

<thead id="thead1007">

			

<row id="tr1014">

				

<entry id="th1007">
<emphasis id="Listing_7" effect="bold">

Listing 7

</emphasis>

. The overridden init method.

</entry>

			

</row>

		

</thead>


		

<tbody id="tbody1007">

			

<row id="tr1015">

				

<entry id="td1007">



<code id="pre1006" display="block">
  public void init(GameContainer gc)
                                   throws SlickException {
    //Set the frame rate in frames per second.
    gc.setTargetFrameRate(2);
    
  }//end init
</code>



				

</entry>

			

</row>

		

</tbody>


	

</tgroup>
</table>




	

<para id="p1069">
<emphasis id="strong1148" effect="bold">
Set the target frame rate

</emphasis>
</para>




<para id="p1070">
 

<link id="a1065" target-id="Listing_7">


Listing 7

</link>

 calls the 

<emphasis id="strong1149" effect="bold">
setTargetFrameRate

</emphasis>
 on the 

<emphasis id="strong1150" effect="bold">

GameContainer

</emphasis>
 object passing 2 as a parameter. The description of this 
method in the


<link id="a1066" url="http://slick.ninjacave.com/javadoc/org/newdawn/slick/GameContainer.html#setTargetFrameRate%28int%29">


javadocs

</link>

 is 

<emphasis id="em1018" effect="italics">
"Set the target fps we're hoping to get,"

</emphasis>
</para>




</section>
<section id="h31008">
<title>
<emphasis id="The_overridden_update_method" effect="bold">

The overridden update method

</emphasis>


</title>




<para id="p1071">
<link id="a1067" target-id="Listing_8">

Listing 8

</link>

 shows the overridden update method.

</para>





	

<table id="table1008" summary="This is a table." pgwide="677">
<tgroup cols="1">


		

<thead id="thead1008">

			

<row id="tr1016">

				

<entry id="th1008">
<emphasis id="Listing_8" effect="bold">

Listing 8

</emphasis>

. The overridden update method.

</entry>

			

</row>

		

</thead>


		

<tbody id="tbody1008">

			

<row id="tr1017">

				

<entry id="td1008">



<code id="pre1007" display="block">
  public void update(GameContainer gc, int delta)
                                    throws SlickException{
    //Compute and save total time since start in seconds.
    totalTime += delta/1000.0;
    
    //Save delta for display in render method.
    incrementalTime = delta;
    
  }//end update
</code>



				

</entry>

			

</row>

		

</tbody>


	

</tgroup>
</table>




	

<para id="p1072">
<emphasis id="strong1151" effect="bold">
Compute total elapsed time

</emphasis>
</para>


	

<para id="p1073">
<link id="a1068" target-id="Listing_8">

Listing 8

</link>

 converts the incoming value of delta 
	in milliseconds into seconds and adds it to the value stored in the instance 
	variable named 

<emphasis id="strong1152" effect="bold">
totalTime

</emphasis>
 that is declared in
	

<link id="a1069" target-id="Listing_5">

Listing 5

</link>

. The 

<emphasis id="strong1153" effect="bold">
totalTime

</emphasis>
 value 
	will be used to display the first line of text near the center of
	

<link id="a1070" target-id="Figure_1">

Figure 1

</link>

.

</para>




<para id="p1074">
<emphasis id="strong1154" effect="bold">
Save the value of delta

</emphasis>
</para>




<para id="p1075">
<link id="a1071" target-id="Listing_8">

Listing 8

</link>

 saves the incoming value of delta in the 
instance variable named i

<emphasis id="strong1155" effect="bold">
ncrementalTime

</emphasis>
 that was also declared 
in 

<link id="a1072" target-id="Listing_5">

Listing 5

</link>

. The value stored in 

<emphasis id="strong1156" effect="bold">

incrementalTime 

</emphasis>
will be used to display the second line of text near the 
center of 

<link id="a1073" target-id="Figure_1">

Figure 1

</link>

.

</para>




</section>
<section id="h31009">
<title>
<emphasis id="The_overridden_render_method" effect="bold">

The overridden render method

</emphasis>


</title>




<para id="p1076">
<link id="a1074" target-id="Listing_9">

Listing 9

</link>

 shows the overridden 

<emphasis id="strong1157" effect="bold">
render

</emphasis>
 method.

</para>


	


	

<table id="table1009" summary="This is a table." pgwide="677">
<tgroup cols="1">


		

<thead id="thead1009">

			

<row id="tr1018">

				

<entry id="th1009">
<emphasis id="Listing_9" effect="bold">

Listing 9

</emphasis>

. The overridden render method.

</entry>

			

</row>

		

</thead>


		

<tbody id="tbody1009">

			

<row id="tr1019">

				

<entry id="td1009">



<code id="pre1008" display="block">
  public void render(GameContainer gc, Graphics g)
                                    throws SlickException{
    //Truncate totalTime to one decimal digit and
    // display
    double time = (int)(totalTime*10)/10.0;
    g.drawString("totalTime: "+time,100.0f,100.0f);
    
    //Display incremental time.
    g.drawString("incrementalTime: " + incrementalTime,
                 100.0f,120.0f);
  }//end render
</code>



				

</entry>

			

</row>

		

</tbody>


	

</tgroup>
</table>




	

<para id="p1077">
<emphasis id="strong1158" effect="bold">
Truncate and draw the total time

</emphasis>
</para>


	

<para id="p1078">
<link id="a1075" target-id="Listing_9">

Listing 9

</link>

 begins by truncating the value of
	

<emphasis id="strong1159" effect="bold">
totalTime

</emphasis>
 to only two decimal digits and saving the 
	truncated value in a local variable named 

<emphasis id="strong1160" effect="bold">
time

</emphasis>
. I will 
	leave it as an exercise for the student to analyze the code that I used to 
	do that.

</para>




<para id="p1079">
Then 

<link id="a1076" target-id="Listing_9">

Listing 9

</link>

 calls the 

<emphasis id="strong1161" effect="bold">
drawString

</emphasis>
 
method on the graphics context received as an incoming parameter of type 

<emphasis id="strong1162" effect="bold">

Graphics

</emphasis>
 to display the value in the first line of text near the center 
of 

<link id="a1077" target-id="Figure_1">

Figure 1

</link>

.

</para>




<para id="p1080">
The 

<emphasis id="strong1163" effect="bold">
drawString

</emphasis>
 method takes three parameters. The first is 
the string that is to be drawn in the game window and the next two are the horizontal and vertical 
coordinates for the location in which the string is to be drawn.

</para>




<para id="p1081">
<emphasis id="strong1164" effect="bold">
Draw the saved value of delta

</emphasis>
</para>




<para id="p1082">
Then 

<link id="a1078" target-id="Listing_9">

Listing 9

</link>

 calls the 

<emphasis id="strong1165" effect="bold">
drawString

</emphasis>
 
method again to draw the saved value of delta from the most recent call to the


<emphasis id="strong1166" effect="bold">
update

</emphasis>
 method as the second line of text near the center of


<link id="a1079" target-id="Figure_1">

Figure 1

</link>

.

</para>




</section>
<section id="h31010">
<title>
<emphasis id="End_of_discussion" effect="bold">

End of discussion

</emphasis>


</title>




<para id="p1083">
That concludes the discussion of the program named 

<emphasis id="strong1167" effect="bold">
Slick0130a

</emphasis>
. 
Although this is a simple program, it should provide a little more insight into 
one 

<link id="a1080" target-id="one_approach">

approach

</link>

 to creating a game program using the 
Slick2D library.

</para>







</section>
</section>
</section>
<section id="h11005">
<title>
<emphasis id="Run_the_program" effect="bold">

Run the program

</emphasis>


</title>






<para id="p1084">
I encourage you to copy the code from 

<link id="a1081" target-id="Listing_10">

Listing 10

</link>

. Compile the code and execute 
it, 
making changes, and observing the results of your changes. Make certain that you 
can explain why your changes behave as they do.

</para>


	

</section>
<section id="h11006">
<title>
<emphasis id="Summary" effect="bold">

Summary

</emphasis>


</title>




<para id="p1085">
You learned about a property of the 

<emphasis id="strong1168" effect="bold">
GameContainer

</emphasis>
 class 
named 

<emphasis id="strong1169" effect="bold">
running

</emphasis>
, and how it is used by the 

<emphasis id="strong1170" effect="bold">
start

</emphasis>
 
method to keep the game loop running.

</para>




<para id="p1086">
You learned about the salient features of the 

<emphasis id="strong1171" effect="bold">
gameLoop

</emphasis>
 
method of the 

<emphasis id="strong1172" effect="bold">
AppGameContainer

</emphasis>
 class.

</para>




<para id="p1087">
You learned about the 

<emphasis id="strong1173" effect="bold">
updateAndRender

</emphasis>
 method of the 

<emphasis id="strong1174" effect="bold">

GameContainer

</emphasis>
 class and how it decides when and if to call the 

<emphasis id="strong1175" effect="bold">

update

</emphasis>
 and 

<emphasis id="strong1176" effect="bold">
render

</emphasis>
 methods of the object of the 

<emphasis id="strong1177" effect="bold">

Game

</emphasis>
 class that is wrapped by the container.

</para>




<para id="p1088">
You touched on the difference between normal delta and smoothed delta.

</para>




<para id="p1089">
You learned about 

<emphasis id="strong1178" effect="bold">
minimumLogicInterval

</emphasis>
 and 

<emphasis id="strong1179" effect="bold">

maximumLogicInterval 

</emphasis>
and how the contents of those two variables are 
used to determine if, when, and how many times to call the 

<emphasis id="strong1180" effect="bold">
update

</emphasis>
 method during 
each iteration of the game loop. You also learned how the contents of these two 
variables are used to determine the value that is passed as delta each time the 
update method is called.

</para>




<para id="p1090">
You learned that the 

<emphasis id="strong1181" effect="bold">
render

</emphasis>
 method is normally called once 
and only once during each iteration of the game loop.

</para>




<para id="p1091">
You saw a simple example of how you can use the value of delta that is 
received by the 

<emphasis id="strong1182" effect="bold">
update

</emphasis>
 method to control the behavior of a game 
program.

</para>




<para id="p1092">
You learned that you can set the size of the game window when you instantiate 
an object of the 

<emphasis id="strong1183" effect="bold">
AppGameContainer

</emphasis>
 class by passing dimension 
parameters to the constructor.

</para>




<para id="p1093">
You learned that you can set the target frame rate by calling the 

<emphasis id="strong1184" effect="bold">

setTargetFrameRate

</emphasis>
 method on the 

<emphasis id="strong1185" effect="bold">
GameContainer

</emphasis>
 object.

</para>




<para id="p1094">
You learned how to display text in the game window.

</para>




</section>
<section id="h11007">
<title>
<emphasis id="Whats_next" effect="bold">

What's next?

</emphasis>


</title>




<para id="p1095">
In the next module, we will take a look at displaying images with 
transparency.

</para>


	

</section>
<section id="h11008">
<title>
<emphasis id="Miscellaneous" effect="bold">

Miscellaneous

</emphasis>


</title>


	

<para id="p1096">
This section contains a variety of miscellaneous information.

</para>





	

<note id="note1000" type="">


		


			


				

<emphasis id="strong1186" effect="bold">
Housekeeping material

</emphasis>

				

<list id="ul1014" list-type="bulleted">

					

<item id="li1070">
Module name: Slick0130: The game loop

</item>


					

<item id="li1071">
File: Slick0130.htm


</item>


					

<item id="li1072">
Published: 02/04/13

</item>


					

<item id="li1073">
Revised: 06/09/15 for 64-bit

</item>


				

</list>


				

</note>

			


		



	






	

<note id="note1001" type="">


		


			


				

<emphasis id="strong1187" effect="bold">
Disclaimers:

</emphasis>
<para id="p1097">
<emphasis id="strong1188" effect="bold">
Financial

</emphasis>
: Although the Connexions
site makes it possible for you to download a PDF file for this
module at no charge, and also makes it possible for you to
purchase a pre-printed version of the PDF file, you should be
aware that some of the HTML elements in this module may not translate well into
PDF.

</para>


				

<para id="p1098">
I also want you to know that, I receive no financial compensation from the Connexions website even if you purchase 
	the PDF version of the module.

</para>


				

<para id="p1099">
In the past, unknown individuals have copied my modules from cnx.org, converted them to Kindle books, and 
				placed them for sale on Amazon.com showing me as the author. I 
				neither receive compensation for those sales nor do I know who does 
				receive compensation. If you purchase such a book, please be 
				aware that it is a copy of a module that is freely 
				available on cnx.org and that it was made and published without 
				my prior knowledge.

</para>


				

<para id="p1100">
<emphasis id="strong1189" effect="bold">
Affiliation

</emphasis>
: I am a professor of Computer Information 
	Technology at Austin Community College in Austin, TX.
	

</para>


				

</note>

			


		



	





</section>
<section id="h11009">
<title>
<emphasis id="Complete_program_listing" effect="bold">

Complete program listing

</emphasis>


</title>




<para id="p1101">
<link id="a1082" target-id="Listing_10">

Listing 10

</link>

 provides a complete listing of the 
program named 

<emphasis id="strong1190" effect="bold">
Slick0130a

</emphasis>
.

</para>


	


	

<table id="table1010" summary="This is a table." pgwide="677">
<tgroup cols="1">


		

<thead id="thead1010">

			

<row id="tr1020">

				

<entry id="th1010">
<emphasis id="Listing_10" effect="bold">

Listing 10

</emphasis>

. Source code for the program named Slick0130a.

</entry>

			

</row>

		

</thead>


		

<tbody id="tbody1010">

			

<row id="tr1021">

				

<entry id="td1010">



<code id="pre1009" display="block">
/*Slick0130a.java
Copyright 2012, R.G.Baldwin

A very skinny Slick program. Barely more than a skeleton.

Tested using JDK 1.7 under WinXP
*********************************************************/

import org.newdawn.slick.AppGameContainer;
import org.newdawn.slick.BasicGame;
import org.newdawn.slick.GameContainer;
import org.newdawn.slick.Graphics;
import org.newdawn.slick.SlickException;

public class Slick0130a extends BasicGame{
  
  //Instance variables for use in computing and
  // displaying total time since program start and
  // time for each frame.
  double totalTime = 0;
  int incrementalTime = 0;

  public Slick0130a(){
    //Call to superclass constructor is required.
    super("Slick0130a, Baldwin.");
  }//end constructor
  //----------------------------------------------------//

  public static void main(String[] args)
                                    throws SlickException{
    try{
      AppGameContainer app = (
                       new AppGameContainer(
                         new Slick0130a(),400,200,false));
      app.start();
    }catch(SlickException e){
      e.printStackTrace();
    }//end catch
  }//end main
  //----------------------------------------------------//

  @Override
  public void init(GameContainer gc)
                                   throws SlickException {
    //Set the frame rate in frames per second.
    gc.setTargetFrameRate(2);
    
  }//end init
  //----------------------------------------------------//

  @Override
  public void update(GameContainer gc, int delta)
                                    throws SlickException{
    //Compute and save total time since start in seconds.
    totalTime += delta/1000.0;
    
    //Save delta for display in render method.
    incrementalTime = delta;
    
  }//end update
  //----------------------------------------------------//


  public void render(GameContainer gc, Graphics g)
                                    throws SlickException{
    //Truncate totalTime to one decimal digit and
    // display
    double time = (int)(totalTime*10)/10.0;
    g.drawString("totalTime: "+time,100.0f,100.0f);
    
    //Display incremental time.
    g.drawString("incrementalTime: " + incrementalTime,
                 100.0f,120.0f);
  }//end render

}//end class Slick0130a
</code>



				

</entry>

			

</row>

		

</tbody>


	

</tgroup>
</table>




	

<para id="p1102">
-end- 

</para>






</section>
</content>




</document>